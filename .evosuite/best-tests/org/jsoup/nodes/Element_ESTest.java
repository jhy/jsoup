/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 21:44:45 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "0K?`a Y?JW";
      Document document0 = new Document("0K?`a Y?JW");
      document0.hasAttr("0K?`a Y?JW");
      Element element0 = document0.append("0K?`a Y?JW");
      document0.className();
      element0.ownText();
      document0.getElementsMatchingText("0K?`a Y?JW");
      document0.tagName("M)_jvE8b3");
      Document document1 = (Document)document0.appendTo(element0);
      // Undeclared exception!
      document1.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("&0-Q%zTF*j)(");
      Element element0 = document0.val("&0-Q%zTF*j)(");
      element0.isBlock();
      document0.toString();
      Element element1 = document0.addClass("ks6[bQ/!\"rFVA1");
      document0.title();
      element0.getElementsByAttributeValueContaining("&0-Q%zTF*j)(", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      element1.attr("ks6[bQ/!\"rFVA1", "");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("</", "value");
      Element element0 = document0.html("</");
      document0.elementSiblingIndex();
      document0.getElementsByAttributeStarting(" />");
      document0.setBaseUri("value");
      element0.getElementsByAttributeValueStarting("/6tvI", ">H`H$Dw d");
      element0.children();
      document0.getElementsByAttributeValueNot("br", "org.jsoup.nodes.Entities$EscapeMode");
      element0.getElementsContainingText(" />");
      element0.getAllElements();
      document0.tag();
      element0.id();
      document0.dataNodes();
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.text("+s(w`SZV`BJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("      ");
      document0.wholeText();
      Element element0 = document0.body();
      element0.shallowClone();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append(0.0F);
      int int0 = 4;
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      // Undeclared exception!
      try { 
        stringBuffer1.insert(4, (CharSequence) stringBuffer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0K?`a Y?JW", "0K?`a Y?JW");
      Element element0 = new Element("0K?`a Y?JW");
      Element element1 = document0.head();
      element1.siblingNodes();
      element1.className();
      element1.hasAttr("0K?`a Y?JW");
      String string0 = Node.EmptyString;
      Element element2 = element1.prepend("0K?`a Y?JW");
      element2.getElementsByAttributeValue("0K?`a Y?JW", "0K?`a Y?JW");
      element2.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("&0-Q%zTF*j)(");
      Element element0 = document0.val("&0-Q%zTF*j)(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Node.EmptyString;
      Element element1 = document0.addClass("ks6[bQ/!\"rFVA1");
      element0.getElementsByAttributeValueContaining("&0-Q%zTF*j)(", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      document0.append("");
      // Undeclared exception!
      try { 
        element1.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "0K?`a Y?JW";
      Document document0 = new Document("0K?`a Y?JW");
      Element element0 = document0.append("0K?`a Y?JW");
      document0.getElementsMatchingText("0K?`a Y?JW");
      Document document1 = (Document)document0.appendTo(element0);
      Document document2 = Parser.parseBodyFragmentRelaxed("0K?`a Y?JW", "0K?`a Y?JW");
      document2.createElement("0K?`a Y?JW");
      Document document3 = (Document)document1.addClass("0K?`a Y?JW");
      document3.siblingNodes();
      document3.className();
      document3.hasAttr("audio");
      document3.baseUri();
      document1.attributes();
      document0.parents();
      document1.ensureChildNodes();
      // Undeclared exception!
      document3.prepend("audio");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      // Undeclared exception!
      try { 
        document0.appendTo(document3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("</", "value");
      Element element0 = document0.html("</");
      document0.elementSiblingIndex();
      document0.getElementsByAttributeStarting(" />");
      document0.setBaseUri("value");
      element0.getElementsByAttributeValueStarting("/6tvI", ">H`H$Dw d");
      element0.children();
      document0.getElementsByAttributeValueNot("br", "org.jsoup.nodes.Entities$EscapeMode");
      element0.getElementsContainingText(" />");
      element0.getAllElements();
      document0.tag();
      element0.id();
      document0.dataNodes();
      element0.previousElementSibling();
      element0.getElementsByAttributeValueMatching(">H`H$Dw d", (Pattern) null);
      element0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Element element0 = document0.addClass(":nth-child(%d)");
      document0.getElementsByAttributeValueEnding("required", ":nth-child(%d)");
      document0.hasText();
      document0.textNodes();
      element0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ";";
      Document document0 = new Document(";");
      document0.setSiblingIndex(1864);
      Document document1 = (Document)document0.attr(";", true);
      int int0 = 78;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document1.insertChildren(78, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "0K?`a Y?JW";
      Document document0 = new Document("0K?`a Y?JW");
      Document document1 = (Document)document0.append("0K?`a Y?JW");
      document0.getElementsMatchingText("0K?`a Y?JW");
      Document document2 = (Document)document0.appendTo(document1);
      Document document3 = Parser.parseBodyFragmentRelaxed("0K?`a Y?JW", "0K?`a Y?JW");
      document3.createElement("0K?`a Y?JW");
      Element element0 = document3.head();
      document1.ensureChildNodes();
      element0.className();
      element0.hasAttr("audio");
      element0.baseUri();
      document2.attributes();
      document0.parents();
      document2.ensureChildNodes();
      // Undeclared exception!
      document1.append("audio");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy");
      String string0 = " />";
      Document document0 = Parser.parseBodyFragmentRelaxed("com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy", " />");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      String string1 = "";
      // Undeclared exception!
      try { 
        document2.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "{4fVyN%1.!M$m,6";
      Document document0 = Parser.parseBodyFragment("{4fVyN%1.!M$m,6", "{4fVyN%1.!M$m,6");
      Document document1 = document0.normalise();
      Element element0 = document1.shallowClone();
      document0.parentNode = (Node) element0;
      element0.setSiblingIndex((-3233));
      element0.getElementsByIndexEquals((-2060));
      document0.before((Node) element0);
      document1.parents();
      Document document2 = (Document)document1.prependText("{4fVyN%1.!M$m,6");
      document2.hasAttributes();
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("YIaaq");
      Document document1 = document0.clone();
      Element element0 = document1.appendTo(document0);
      element0.getElementsByAttributeValueMatching("YIaaq", "B6E7_");
      document1.getElementsMatchingText("wP$2-pptRAhs%kgElv");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "nj&yl";
      Document document0 = Parser.parse("nj&yl", "nj&yl");
      Document document1 = document0.normalise();
      document1.tagName("nj&yl");
      Pattern pattern0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(1wG]\"^?o&w]mC6", "(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Tag.valueOf("E");
      Document document0 = Parser.parse("E", "E");
      Element element0 = document0.append("action");
      element0.getElementsContainingText("nj&yl");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("BeforeAttributeValue");
      Element element0 = document0.appendElement("BeforeAttributeValue");
      element0.getElementsByAttributeStarting("5t_");
      element0.elementSiblingIndex();
      document0.getElementsMatchingText("5t_");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      // Undeclared exception!
      document1.val("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("head");
      Pattern pattern0 = Pattern.compile("", 2863);
      pattern0.matcher("");
      document0.html();
      Pattern.compile("head");
      Pattern.matches("nj&yl", "");
      document0.getAllElements();
      document0.getElementsByAttributeValueMatching("head", pattern0);
      document0.childNodeSize();
      document0.parents();
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("menu", "article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      document2.attr("bdo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      document1.updateMetaCharsetElement(false);
      Element element0 = document2.prependElement("[\"dCA*Mrpf*;");
      document0.getElementsByAttribute("im#");
      element0.toString();
      MockFileWriter mockFileWriter0 = element0.html((MockFileWriter) null);
      document2.getElementsByAttributeValueEnding("menu", "article");
      element0.dataset();
      document2.getElementsByAttributeValueStarting("article", "`r");
      int int0 = (-2046);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1267);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      element0.getElementsMatchingOwnText("`r");
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(boolean0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(boolean0);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(mockFileWriter0, int0, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      document0.textNodes();
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      document1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{4fVyN%1.!M$m,6", "{4fVyN%1.!M$m,6");
      Document document1 = document0.normalise();
      Element element0 = document1.shallowClone();
      document0.parentNode = (Node) element0;
      element0.setSiblingIndex((-3233));
      element0.getElementsByIndexEquals((-2060));
      document1.parents();
      Document document2 = (Document)document1.prependText("{4fVyN%1.!M$m,6");
      document2.hasAttributes();
      document2.attributes();
      document1.getElementsMatchingText("");
      Document document3 = (Document)document2.prependText("{4fVyN%1.!M$m,6");
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData((String) null);
      document3.is((Evaluator) evaluator_ContainsData0);
      // Undeclared exception!
      try { 
        document1.selectFirst("{4fVyN%1.!M$m,6");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{4fVyN%1.!M$m,6': unexpected token at '{4fVyN%1.!M$m,6'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.appendChild(document1);
      document2.attr("bdo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      document1.updateMetaCharsetElement(false);
      Element element0 = document2.prependElement("[\"dCA*Mrpf*;");
      document0.getElementsByAttribute("im#");
      element0.toString();
      element0.html((MockFileWriter) null);
      document2.getElementsByAttributeValueEnding("menu", "article");
      element0.dataset();
      document2.getElementsByAttributeValueStarting("article", "`r");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1267);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, (-2046), document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "{4fVyN%1.!M$m,6";
      Document document0 = Parser.parseBodyFragment("{4fVyN%1.!M$m,6", "{4fVyN%1.!M$m,6");
      Document document1 = document0.normalise();
      Element element0 = document1.shallowClone();
      document0.parentNode = (Node) element0;
      element0.setSiblingIndex((-3233));
      element0.getElementsByIndexEquals((-2060));
      element0.nextElementSiblings();
      document1.hasAttributes();
      String string1 = "";
      document1.attributes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      // Undeclared exception!
      document2.attr("'nE79qd4\"eh&8[8", " />");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "hr";
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "hr");
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput(" > ", "C9!~n");
      String string1 = "l\\-eIDy8;Z #AR";
      String string2 = "org.jsoup.nodes.Entities";
      parser0.parseInput(" > ", " > ");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Parser.xmlParser();
      document1.getElementsByAttributeValue("C9!~n", "l-eIDy8;Z #AR");
      Element element0 = document0.appendText("hr");
      element0.elementSiblingIndex();
      Element element1 = element0.child(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(128);
      charArrayWriter0.flush();
      charArrayWriter0.flush();
      document1.html(charArrayWriter0);
      // Undeclared exception!
      try { 
        element1.child(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("\"RS");
      List<Node> list0 = new LinkedList<Node>();
      document0.nodelistChanged();
      String string0 = "Et#n:@:l*o0hFB";
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Charset charset0 = document1.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      // Undeclared exception!
      try { 
        document0.wrap("body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = Node.EmptyString;
      document0.html();
      Element element0 = document0.text("15U");
      String string1 = "textarea";
      Document document1 = (Document)element0.text("textarea");
      document1.ensureChildNodes();
      document1.appendElement("required");
      element0.getElementsByAttributeValue("required", "textarea");
      String string2 = "W";
      String string3 = null;
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("menu", "article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      document2.removeClass("H.Yz");
      document2.attr("bo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      document1.updateMetaCharsetElement(false);
      Element element0 = document2.prependElement("article");
      document0.getElementsByAttribute("im#");
      element0.toString();
      element0.html((MockFileWriter) null);
      document2.getElementsByAttributeValueEnding("menu", "article");
      element0.dataset();
      document2.getElementsByAttributeValueStarting("article", "`r");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1267);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, (-2088), document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("\"RS");
      Document document1 = (Document)document0.empty();
      document1.siblingNodes();
      document1.nodelistChanged();
      String string0 = "Et#n:@:l*o0hFB";
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Charset charset0 = document2.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      // Undeclared exception!
      try { 
        document0.is("Et#n:@:l*o0hFB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Et#n:@:l*o0hFB': unexpected token at ':@:l*o0hFB'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("menu", "article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      document2.attr("bdo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document1.updateMetaCharsetElement(false);
      Element element0 = document2.prependElement("[\"dCA*Mrpf*;");
      document0.getElementsByAttribute("im#");
      element0.toString();
      element0.html((MockFileWriter) null);
      document2.getElementsByAttributeValueEnding("menu", "article");
      element0.dataset();
      document2.getElementsByAttributeValueStarting("article", "`r");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1267);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      document1.nodeName();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, (-2046), document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("audio", "AMD+os(s");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.body();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.text("AMD+os(s");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.head();
      element0.cssSelector();
      document0.tag();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("qP]y,");
      Document document1 = document0.normalise();
      Element element0 = document1.appendTo(document0);
      element0.prependChild(document1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("&0-Q%zTF*j)(");
      Element element0 = document0.val("&0-Q%zTF*j)(");
      element0.isBlock();
      document0.toString();
      document0.addClass("ks6[bQ/!\"rFVA1");
      Elements elements0 = element0.getElementsByAttributeValueContaining("&0-Q%zTF*j)(", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      // Undeclared exception!
      try { 
        document0.insertChildren((-866), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "menu";
      String string1 = "article";
      Document document0 = Parser.parse("menu", "article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      String string2 = "bdo";
      boolean boolean0 = false;
      document2.attr("bdo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      document1.appendChild(document2);
      document1.updateMetaCharsetElement(false);
      // Undeclared exception!
      document2.prependElement("[\"dCA*Mrpf*;");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("&0-Q%zTF*j)(");
      Element element0 = document0.val("&0-Q%zTF*j)(");
      document0.hasClass("&0-Q%zTF*j)(");
      element0.isBlock();
      document0.toString();
      document0.addClass("ks6[bQ/!\"rFVA1");
      document0.getElementsContainingOwnText("ks6[bQ/!\"rFVA1");
      Elements elements0 = element0.getElementsByAttributeValueContaining("&0-Q%zTF*j)(", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      // Undeclared exception!
      try { 
        element0.insertChildren(2863, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "0K?`a Y?JW";
      Document document0 = new Document("0K?`a Y?JW");
      Element element0 = document0.append("0K?`a Y?JW");
      document0.getElementsMatchingText("0K?`a Y?JW");
      Document document1 = (Document)document0.appendTo(element0);
      Document document2 = Document.createShell("0K?`a Y?JW");
      document2.createElement("0K?`a Y?JW");
      Element element1 = document2.head();
      element1.siblingNodes();
      element1.className();
      element1.hasAttr("audio");
      element1.baseUri();
      document1.attributes();
      document0.parents();
      document1.ensureChildNodes();
      element1.prepend("audio");
      // Undeclared exception!
      try { 
        element0.select("[SMYlnk");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'SMYlnk'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "article";
      Document document0 = Parser.parse("menu", "article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      String string1 = "bdo";
      boolean boolean0 = false;
      document2.attr("bdo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      document1.updateMetaCharsetElement(false);
      Element element0 = document2.prependElement("[\"dCA*Mrpf*;");
      document0.getElementsByAttribute("im#");
      element0.toString();
      // Undeclared exception!
      try { 
        document2.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("V6/");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("iD[xa.-B|");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.dataset();
      document0.cssSelector();
      document0.html("}_0)nJ;R}3;.zdyx&=");
      document1.hasText();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document(".");
      Tag tag0 = document0.tag();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Attribute attribute0 = new Attribute(".", "~x1cpiDIeyL-zACI", (Attributes) null);
      Attributes attributes0 = attribute0.parent;
      FormElement formElement0 = new FormElement(tag0, "~x1cpiDIeyL-zACI", (Attributes) null);
      Element element0 = formElement0.clone();
      Map.Entry.comparingByValue();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Tag.valueOf(".");
      element0.id();
      formElement0.html("");
      document0.html("qi7Mg {+CMh#>");
      FormElement formElement1 = (FormElement)formElement0.prepend("org.jsoup.select.CombiningEvaluator");
      formElement1.appendChild(document0);
      formElement1.setSiblingIndex((-1742));
      formElement0.baseUri();
      formElement0.getElementsContainingText("textarea");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.append("");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      String string0 = "|U\\'JZ";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "lna>.yk*=[WF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      Element element0 = document0.empty();
      document0.normalise();
      Element element1 = element0.attr("Dgd@*%=6m>z3MzW*j", false);
      document0.clearAttributes();
      document0.previousElementSiblings();
      document0.nodelistChanged();
      element0.dataNodes();
      document0.html();
      String string0 = "br";
      Element element2 = element1.appendElement("br");
      int int0 = 0;
      element1.siblingNodes();
      Pattern pattern0 = Pattern.compile("ZA6-AQ!+$CX", 0);
      element2.getElementsMatchingText(pattern0);
      element2.appendChild(document0);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("Dgd@*%=6m>z3MzW*j", "ZA6-AQ!+$CX");
      // Undeclared exception!
      element1.is((Evaluator) evaluator_AttributeWithValueContaining0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "org.jsoup.select.Evaluator$AttributeKeyPair";
      Document document0 = parser0.parseInput("]Ltoe9Xt*ka_$7>hL<", "org.jsoup.select.Evaluator$AttributeKeyPair");
      document0.textNodes();
      Element element0 = document0.toggleClass("Kj(B");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$AttributeKeyPair");
      linkedList0.add(cDataNode0);
      document0.hasAttributes();
      // Undeclared exception!
      try { 
        element0.insertChildren(32, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      document0.textNodes();
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "(1wG]\"^?o&w]mC6");
      mockFile0.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("Z)C;[bIr-(;C|", "Z)C;[bIr-(;C|");
      Attributes attributes0 = new Attributes();
      Document document1 = document0.parser((Parser) null);
      Element element0 = document1.attr("Z)C;[bIr-(;C|", "Z)C;[bIr-(;C|");
      element0.siblingIndex = 0;
      document1.getElementsByTag("Insert position out of bounds.");
      element0.outerHtml();
      document1.hasSameValue(document0);
      // Undeclared exception!
      try { 
        element0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile.createTempFile("V6/", "V6/");
      String string0 = "DiBd48{;in3gw,(}F}";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T/V6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Tpjp[QVc{");
      Document document0 = Parser.parseBodyFragment("</", ".backup");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "org.jsoup.select.Elements";
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Tag tag0 = document1.tag();
      document0.getElementsByAttribute("textarea");
      Set<String> set0 = new LinkedHashSet<String>();
      document0.parents();
      document0.updateMetaCharsetElement(false);
      document1.updateMetaCharsetElement(false);
      Element element0 = new Element(tag0, "|X>");
      Tag.valueOf("org.jsoup.select.Elements");
      element0.getElementsContainingText("attributeDoubleValueCharsSorted");
      // Undeclared exception!
      try { 
        document1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.head();
      element0.cssSelector();
      document0.getElementsByAttribute("org.jsoup.select.Evaluator$Id");
      Comment comment0 = new Comment("nj&yl", "html > head");
      Element element1 = element0.appendChild(comment0);
      element1.selectFirst("textarea");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{u#M%&^>pKHR[2`hQE", "{u#M%&^>pKHR[2`hQE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document1 = document0.parser((Parser) null);
      document1.getElementsByAttributeStarting("7k");
      Tag tag0 = document1.tag();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$1");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("html");
      Document document1 = document0.ownerDocument();
      Tag tag0 = document1.tag();
      document0.getElementsByAttributeValueContaining("pxr{ !9m6?x|VM", "pxr{ !9m6?x|VM");
      int int0 = (-3231);
      document0.getElementsByIndexGreaterThan((-3231));
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      String string0 = "default";
      Tag.valueOf("default");
      Tag.valueOf("pxr{ !9m6?x|VM");
      Attributes attributes1 = attributes0.put("9c<2MB8(\"+[w/( ", "default");
      FormElement formElement0 = new FormElement(tag0, "9c<2MB8(\"+[w/( ", attributes1);
      FormElement formElement1 = (FormElement)formElement0.text("9c<2MB8(\"+[w/( ");
      FormElement formElement2 = (FormElement)formElement1.append("default");
      formElement2.attr("html", "pxr{ !9m6?x|VM");
      formElement1.prependElement("ZRKSUR:`6HIq");
      StringBuilder stringBuilder0 = new StringBuilder("pxr{ !9m6?x|VM");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Charset.forName("pxr{ !9m6?x|VM");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // pxr{ !9m6?x|VM
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("V(m?I.|6hTJ'_P6", "/geF%`QN^@H1$0wB-f%");
      document0.attr("3vv<", false);
      Document document1 = document0.normalise();
      MockFile mockFile0 = new MockFile("/geF%`QN^@H1$0wB-f%", "V(m?I.|6hTJ'_P6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      document1.prependElement("6");
      document0.html(mockFileWriter0);
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document1.insertChildren(1532, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Document.createShell("html");
      Tag tag0 = document0.tag();
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(")>3L", "html");
      document0.getElementsByIndexGreaterThan(58);
      FormElement formElement0 = new FormElement(tag0, "html", attributes1);
      FormElement formElement1 = formElement0.addElement(document0);
      Element element0 = formElement1.text("/%$=PV53Q4xW.@zW!W");
      element0.nextElementSiblings();
      element0.toggleClass("/%$=PV53Q4xW.@zW!W");
      Element element1 = formElement1.addClass("html");
      // Undeclared exception!
      try { 
        element1.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      document0.tag();
      ParseSettings parseSettings0 = null;
      document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("summary", "Ff:pt5F#");
      Element element0 = document0.attr("Insert position out of bounds.", "Ff:pt5F#");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Pattern pattern0 = Pattern.compile("Npu#guU", (-2127));
      document1.getElementsMatchingOwnText(pattern0);
      document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.charset(charset0);
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element(":first-child");
      element0.ownText();
      element0.tag();
      element0.nodelistChanged();
      element0.text();
      Pattern pattern0 = Pattern.compile("K");
      pattern0.split((CharSequence) "Pattern syntax error: ");
      element0.getElementsByAttributeValueMatching("Pattern syntax error: ", pattern0);
      Element element1 = element0.prepend("");
      element1.tagName();
      Node node0 = null;
      // Undeclared exception!
      try { 
        element0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "radio";
      StringReader stringReader0 = new StringReader("radio");
      Document document0 = parser0.parseInput((Reader) stringReader0, "radio");
      Element element0 = document0.val("radio");
      String string1 = "+O]P},";
      Element element1 = element0.addClass("+O]P},");
      document0.ensureChildNodes();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element1;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      document0.setSiblingIndex(296);
      nodeArray0[6] = (Node) element0;
      String string2 = "\\;5k5^M+2gp";
      String string3 = "}m&uuP_ zc*pl{(";
      document0.getElementsByAttributeValueNot(";5k5^M+2gp", "}m&uuP_ zc*pl{(");
      // Undeclared exception!
      try { 
        element0.insertChildren((-2064), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.tagName("org.jsoup.nodes.Element$1");
      document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "figcaption");
      document0.childNodesAsArray();
      String string1 = "ru";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("ru", "`Z[e p5(s*_4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: `Z[e p5(s*_4
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("{J<");
      document0.parser();
      Document document1 = document0.parser((Parser) null);
      Document document2 = document1.normalise();
      Document document3 = document2.clone();
      document3.getElementsByAttributeValueNot("#root", "/#$'");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("E/MqZK");
      Element element0 = new Element(tag0, "E/MqZK");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("POB{Y", parseSettings0);
      element0.children();
      element0.getElementsByClass("E/MqZK");
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document(".:G*|o.r^9U");
      document0.body();
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("g3d6FhJ,");
      document0.hasClass("g3d6FhJ,");
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "S;)+T#'@9ux+G3x,L\\";
      Document document0 = Parser.parse("S;)+T#'@9ux+G3x,L", "S;)+T#'@9ux+G3x,L");
      String string1 = "cX";
      Element element0 = document0.appendElement("cX");
      element0.prependElement("S;)+T#'@9ux+G3x,L");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.hasAttr("cX");
      element0.classNames((Set<String>) linkedHashSet0);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("S;)+T#'@9ux+G3x,L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: S;)+T#'@9ux+G3x,L
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = ",?&";
      Document document0 = Document.createShell(",?&");
      Element element0 = document0.append(",?&");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "`EZm.7?tF$4";
      Document document0 = Parser.parseBodyFragment("`EZm.7?tF$4", "`EZm.7?tF$4");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document1.elementSiblingIndex();
      Document document3 = document2.outputSettings(document_OutputSettings1);
      Parser parser0 = Parser.xmlParser();
      Document document4 = document3.parser(parser0);
      String string1 = "";
      Element element0 = document4.removeClass("");
      element0.appendChild(document1);
      Element.preserveWhitespace(element0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      Element element1 = document0.prependChild(document4);
      element1.empty();
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      String string2 = "";
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      document1.createElement("`FgQolfBc");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      Element.preserveWhitespace(document1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.clone();
      document0.doSetBaseUri("");
      // Undeclared exception!
      try { 
        document0.replaceWith(document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.parser(parser0);
      Element element0 = document3.toggleClass("");
      element0.parent();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
      String string0 = "a4|I5qv#ZCmk|2dT";
      Document document0 = new Document("a4|I5qv#ZCmk|2dT");
      Document document1 = document0.parser((Parser) null);
      document1.normalise();
      // Undeclared exception!
      try { 
        document1.before("a4|I5qv#ZCmk|2dT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "org.jsoup.select.Elements";
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Tag tag0 = document1.tag();
      document1.classNames();
      document0.parents();
      document0.updateMetaCharsetElement(true);
      document1.updateMetaCharsetElement(true);
      Element element0 = new Element(tag0, "|X>");
      element0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        document1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "(1wG]\"^?o&w]mC6";
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = (Document)document0.appendChild(document1);
      document2.appendTo(document1);
      document2.prependText("(1wG]\"^?o&w]mC6");
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile(mockFile0, "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile2 = (MockFile)mockFile1.getCanonicalFile();
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile2, true);
      int int0 = 58;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("]/&Yd.Bim#;y\"6o>T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]/&Yd.Bim#;y\"6o>T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("f>S1shzBy");
      Element element0 = document0.empty();
      document0.toString();
      Element element1 = document0.append("n~)5yYWFV5w<:U`|-G");
      List<TextNode> list0 = element1.textNodes();
      element0.append("ST{L");
      document0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("-H[~yRft>59[(\"", "-H[~yRft>59[(\"");
      String string0 = "3}=_S+in$Vf P!`cQ!/";
      Element element0 = document0.removeClass("3}=_S+in$Vf P!`cQ!/");
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "{4fVyN%1.!M$m,6";
      Document document0 = Parser.parseBodyFragment("{4fVyN%1.!M$m,6", "{4fVyN%1.!M$m,6");
      Document document1 = document0.normalise();
      Element element0 = document1.shallowClone();
      document0.parentNode = (Node) element0;
      element0.setSiblingIndex((-3233));
      element0.getElementsByIndexEquals((-2060));
      document1.parents();
      Document document2 = (Document)document1.prependText("{4fVyN%1.!M$m,6");
      document2.hasAttributes();
      String string1 = "";
      document2.attributes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "P?nSe^$&u($ws?X'";
      Document document0 = Document.createShell("P?nSe^$&u($ws?X'");
      Element element0 = document0.body();
      element0.dataNodes();
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = (Document)document2.prependText("P?nSe^$&u($ws?X'");
      document3.removeClass("P?nSe^$&u($ws?X'");
      // Undeclared exception!
      try { 
        document2.insertChildren(128, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("_Vn1\"I#A`R>^zEFA");
      Element element0 = document0.toggleClass("_Vn1\"I#A`R>^zEFA");
      Element element1 = document0.removeClass("_Vn1\"I#A`R>^zEFA");
      element0.parentNode = (Node) element1;
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "H5(";
      Document document0 = new Document("H5(");
      Element element0 = document0.empty();
      document0.nextElementSiblings();
      String string1 = "ihY\")#j!ye5Jan P";
      Element element1 = element0.appendTo(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("+aJE7|zCDl");
      element1.hasSameValue(mockFileWriter0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      element0.previousElementSibling();
      nodeArray0[2] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-3100), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.clone();
      Document document3 = document2.normalise();
      document1.getElementsByAttributeValueMatching("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      Element element0 = document3.attr(" > ", true);
      element0.getElementsByIndexLessThan(1005);
      Document document4 = (Document)document1.html("");
      Pattern pattern0 = Pattern.compile("");
      document4.getElementsMatchingText(pattern0);
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("");
      document1.is((Evaluator) evaluator_Attribute0);
      document4.elementSiblingIndex();
      document2.dataset();
      document4.nodelistChanged();
      document4.getElementsByClass(" > ");
      document0.getElementsByAttributeStarting("Split offset must not be greater than current text length");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "lAWKj%1%/K=]KnZr";
      Document document0 = new Document("lAWKj%1%/K=]KnZr");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.appendChild(document0);
      element0.children();
      Element element1 = document1.addClass("lAWKj%1%/K=]KnZr");
      // Undeclared exception!
      element1.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{u#M%&^>pKHR[2`hQE", "{u#M%&^>pKHR[2`hQE");
      Document document1 = document0.parser((Parser) null);
      Tag tag0 = document1.tag();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$1");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&=b~ ARtD9067 }q5");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute(" > ", "&=b~ ARtD9067 }q5", attributes1);
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.put("SKIP_CHILDREN", "#");
      Element element0 = new Element(tag0, "&=b~ ARtD9067 }q5", attributes3);
      element0.className();
      // Undeclared exception!
      try { 
        element0.is("&=b~ ARtD9067 }q5");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '&=b~ ARtD9067 }q5': unexpected token at '&=b~ ARtD9067 }q5'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("\"%Rw&>[4B0W:oYx", "\"%Rw&>[4B0W:oYx");
      Element element0 = document0.head();
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      String string1 = "";
      document0.addClass("");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("b:!Io^6YJ", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "\\L1pRA&ZTL4LU=uSM\"";
      Document document0 = Document.createShell("L1pRA&ZTL4LU=uSM\"");
      document0.getElementsMatchingText("L1pRA&ZTL4LU=uSM\"");
      Element element0 = document0.empty();
      element0.attr(string0);
      element0.elementSiblingIndex();
      int int0 = (-82);
      // Undeclared exception!
      try { 
        element0.child(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("2", "2");
      document0.selectFirst("s");
      StringBuilder stringBuilder0 = new StringBuilder(1324);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '-';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(10, charArray0, 10, 1324);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("EKm?D4? B,");
      Document document1 = document0.ownerDocument();
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      // Undeclared exception!
      try { 
        document2.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "GK3eFX~_)|\"qS=");
      // Undeclared exception!
      try { 
        document0.selectFirst("6Dzz4tf7ax(7Bg9V");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6Dzz4tf7ax(7Bg9V': unexpected token at '(7Bg9V'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.append("");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      element0.getElementsByAttributeValueEnding("|U'JZ", "lna>.yk*=[WF");
      // Undeclared exception!
      try { 
        element0.insertChildren(32, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
      document0.html();
      Element element0 = document0.text("15U");
      String string0 = "textarea";
      Document document1 = (Document)element0.text("textarea");
      document1.ensureChildNodes();
      document1.appendElement("required");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("", "HeH4s\"n#@=f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "hr";
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "hr");
      Parser parser0 = document0.parser();
      Document document1 = parser0.parseInput(" > ", "C9!~n");
      int int0 = 128;
      String string1 = "l\\-eIDy8;Z #AR";
      String string2 = "org.jsoup.nodes.Entities";
      Parser.parseBodyFragment("l-eIDy8;Z #AR", "org.jsoup.nodes.Entities");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Parser.xmlParser();
      document1.getElementsByAttributeValue("C9!~n", "l-eIDy8;Z #AR");
      // Undeclared exception!
      try { 
        document1.insertChildren(128, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Ml", parseSettings0);
      Document document0 = Parser.parseBodyFragment("s+", "Ml");
      Document document1 = document0.clone();
      Attributes attributes0 = document1.attributes();
      document0.append("Ml");
      FormElement formElement0 = new FormElement(tag0, "Ml", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("v2h(RzPt;lfx\"'Wnm");
      element0.cssSelector();
      element0.getElementsByAttributeValueContaining("()|af", "()|af");
      element0.getElementsByAttributeValueMatching("()|af", "");
      Element element1 = element0.appendElement(" > ");
      element1.tag();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      String string1 = "@&";
      Element element0 = document0.append("@&");
      // Undeclared exception!
      try { 
        element0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("(T*\"u~}MWNBK:%<$i%_", "(T*\"u~}MWNBK:%<$i%_");
      Element element0 = document0.attr("J3UkxZO", "(T*\"u~}MWNBK:%<$i%_");
      element0.toggleClass("J3UkxZO");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(3430);
      String string0 = "";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser1.settings(parseSettings0);
      Document document0 = parser1.parseInput("", "");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.head();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuffer1, 19, document_OutputSettings0);
      element0.ownerDocument();
      String string1 = "F?syOzk";
      // Undeclared exception!
      try { 
        element0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("by");
      document0.tagName();
      document0.tagName();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      int int0 = 0;
      evaluator_IsFirstChild0.matches(document0, document0);
      document0.setSiblingIndex(0);
      evaluator_IsFirstChild0.matches(document0, document0);
      Element element0 = document0.addClass("by");
      element0.append(".");
      evaluator_IsFirstChild0.matches(document0, document0);
      evaluator_IsFirstChild0.matches(document0, document0);
      evaluator_IsFirstChild0.matches(document0, document0);
      document0.is((Evaluator) evaluator_IsFirstChild0);
      document0.getAllElements();
      document0.val();
      // Undeclared exception!
      try { 
        document0.after("#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.htmlParser();
      String string0 = "a'x>WKzBv?iIUdN*";
      Document document0 = parser0.parseInput("a'x>WKzBv?iIUdN*", "a'x>WKzBv?iIUdN*");
      Document document1 = document0.parser(parser0);
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("href");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "jePScP+oy<@YMQK|";
      Element element0 = new Element("jePScP+oy<@YMQK|");
      int int0 = (-1374);
      element0.getElementsByIndexEquals((-1374));
      element0.previousElementSiblings();
      element0.hasText();
      // Undeclared exception!
      try { 
        element0.before("jePScP+oy<@YMQK|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";U#Kt]x_1L682");
      Tag.valueOf(".");
      Element element0 = new Element(tag0, ";U#Kt]x_1L682");
      Tag.valueOf(";U#Kt]x_1L682");
      Pattern pattern0 = Pattern.compile(";U#Kt]x_1L682");
      pattern0.split((CharSequence) "#", 0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("pfuhX;c_qi", parseSettings0);
      element0.getElementsByAttributeValueMatching("#", pattern0);
      Element element1 = element0.appendText("pO>7f");
      Element element2 = element1.appendText("                  ");
      element2.attr("pfuhX;c_qi", true);
      element2.parents();
      element0.hasText();
      element0.getElementsByIndexEquals(0);
      element0.ensureChildNodes();
      element1.children();
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      Element element0 = document0.empty();
      Element element1 = element0.attr("Dgd@*%=6m>z3MzW*j", false);
      document0.clearAttributes();
      document0.previousElementSiblings();
      document0.nodelistChanged();
      element0.dataNodes();
      document0.html();
      String string0 = "br";
      Element element2 = element1.appendElement("br");
      int int0 = 0;
      element1.siblingNodes();
      Pattern pattern0 = Pattern.compile("ZA6-AQ!+$CX", 0);
      element2.getElementsMatchingText(pattern0);
      element2.appendChild(document0);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("Dgd@*%=6m>z3MzW*j", "ZA6-AQ!+$CX");
      // Undeclared exception!
      element1.is((Evaluator) evaluator_AttributeWithValueContaining0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document(" > ");
      Element element0 = document0.appendElement(" > ");
      // Undeclared exception!
      try { 
        element0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Document document1 = (Document)document0.attr("", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      document1.text();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2554, (long) 2554);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2554
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("meta[name=charset]", "meta[name=charset]");
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Element element0 = document0.classNames(set0);
      element0.getElementsContainingText("meta[name=charset]");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.attr("value", "~wY");
      Document document1 = element0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Element element1 = document2.addClass("String must not be empty");
      element1.getElementsMatchingOwnText("value");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("button", "button");
      TextNode textNode0 = new TextNode("button", "button");
      Element element0 = document0.appendChild(textNode0);
      document0.childNodesAsArray();
      element0.clone();
      element0.children();
      element0.getElementsByClass("button");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("i", "");
      // Undeclared exception!
      try { 
        document0.after("class");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      Document document1 = document0.parser((Parser) null);
      int int0 = 32;
      // Undeclared exception!
      try { 
        document1.child(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.classNames();
      document0.nodeName();
      document0.is("id");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "thead");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      String string0 = "Pattern syntax error: ";
      Element element0 = document1.createElement("Pattern syntax error: ");
      element0.getElementsContainingText("");
      document0.prependElement("thead");
      document1.data();
      Element element1 = document2.head();
      element1.clearAttributes();
      document0.getElementsByIndexGreaterThan((-819));
      element1.hasAttributes();
      // Undeclared exception!
      try { 
        document0.child((-1608));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document document1 = document0.ownerDocument();
      Parser parser0 = document0.parser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document2 = document1.parser(parser1);
      Document document3 = document1.clone();
      Element element0 = document2.prependChild(document3);
      document3.getElementsByIndexEquals(124);
      String string0 = "U";
      // Undeclared exception!
      try { 
        element0.tagName("U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      document0.getElementsContainingText("l'mQfYU(WHL*");
      document0.appendText("*>?");
      Element element1 = document0.appendText("org.jsoup.nodes.Element$1");
      element1.baseUri();
      PipedReader pipedReader0 = new PipedReader(44);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("={GTDmP8u6sZG;", "={GTDmP8u6sZG;");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      Element element0 = document2.prepend("={GTDmP8u6sZG;");
      element0.appendText("={GTDmP8u6sZG;");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{V([wPs", ":%s(%dn)");
      String string0 = "IfKhT,%";
      document0.absUrl("IfKhT,%");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.child((-1648));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "&1qAQ>{0f{\\(fF";
      Document document0 = Document.createShell("&1qAQ>{0f{(fF");
      Element element0 = document0.html("&1qAQ>{0f{(fF");
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.parser((Parser) null);
      Tag tag0 = document1.tag();
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`0'K8I^Vl5", attributes0);
      Element element0 = formElement0.clone();
      element0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "Pattern syntax error: ";
      Tag tag0 = Tag.valueOf("Pattern syntax error: ");
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", (Attributes) null);
      String string1 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.html("TFI<5hs_SF}d4@x:");
      FormElement formElement1 = formElement0.addElement(element0);
      formElement0.nodelistChanged();
      String string2 = "";
      Element element1 = formElement1.text("");
      String string3 = "org.jsoup.nodes.Element";
      element1.attr("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        element1.select("Pattern syntax error: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'error:': unexpected token at ':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element";
      Document document0 = Parser.parseBodyFragment("`6U\"=?<y", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.before("org.jsoup.nodes.Element");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "org.jsoup.helper.W3CDom";
      Document document0 = new Document("org.jsoup.helper.W3CDom");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Element element0 = new Element("!\";Xa)mx#eU!l");
      element0.getElementsByAttributeValueStarting("!\";Xa)mx#eU!l", ">");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      document2.html("CO| r!BWu25}2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(false);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("%wG;ID", "%wG;ID");
      document0.title("mmU?wW");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      document1.outputSettings(document_OutputSettings0);
      CDataNode cDataNode0 = new CDataNode("big");
      Element element0 = document2.appendChild(cDataNode0);
      element0.appendElement("%wG;ID");
      // Undeclared exception!
      try { 
        element0.after("%wG;ID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("action");
      Element element0 = document0.append("f{by&'I!;[XHG");
      element0.select("action");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("nj&yl");
      Element element0 = document0.tagName("nj&yl");
      element0.tagName();
      Element element1 = element0.addClass("");
      Element element2 = element1.shallowClone();
      Pattern pattern0 = Pattern.compile("");
      element0.val();
      element2.getElementsMatchingOwnText(pattern0);
      document0.getElementsByAttributeStarting("$6riT;$");
      // Undeclared exception!
      try { 
        element0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "c";
      Document document0 = Parser.parseBodyFragment("#root", "c");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("A?m&>m|-", "A?m&>m|-");
      Element element0 = document0.doClone((Node) null);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("Q/WuOgWbMn5CD*UEP!5");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.dataset();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "hX9t#";
      Document document0 = Parser.parseBodyFragmentRelaxed("hX9t#", "hX9t#");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1795), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "");
      Document document1 = document0.clone();
      Parser parser0 = document1.parser();
      Document document2 = parser0.parseInput(".", "class");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      Element element0 = document3.attr("", true);
      element0.appendElement("class");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("</", "value");
      Element element0 = document0.html("</");
      document0.elementSiblingIndex();
      document0.getElementsByAttributeStarting(" />");
      document0.setBaseUri("value");
      element0.getElementsByAttributeValueStarting("/6tvI", ">H`H$Dw d");
      element0.children();
      document0.getElementsByAttributeValueNot("br", "org.jsoup.nodes.Entities$EscapeMode");
      element0.getElementsContainingText(" />");
      element0.getAllElements();
      document0.tag();
      element0.id();
      document0.dataNodes();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("&0-Q%zTF*j)(");
      Element element0 = document0.val("&0-Q%zTF*j)(");
      element0.isBlock();
      document0.toString();
      document0.addClass("ks6[bQ/!\"rFVA1");
      Elements elements0 = element0.getElementsByAttributeValueContaining("&0-Q%zTF*j)(", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      // Undeclared exception!
      try { 
        element0.insertChildren(2863, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser1 = parser0.settings(parseSettings0);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 2101;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2101);
      String string0 = "";
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Document document0 = Document.createShell("");
          document0.wholeText();
          document0.html();
          Element element0 = document0.text("15U");
          String string0 = "textarea";
          Document document1 = (Document)element0.text("textarea");
          document1.ensureChildNodes();
          Element element1 = document1.appendElement("required");
          Element element2 = element1.after("");
          element2.getElementsByIndexGreaterThan(97692013);
          // Undeclared exception!
          try { 
            element0.getElementsByAttributeValue("", "HeH4s\"n#@=f");
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // String must not be empty
             //
             verifyException("org.jsoup.helper.Validate", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("menu", "article");
      document0.ownText();
      Document document1 = document0.clone();
      document0.dataset();
      Document document2 = document1.normalise();
      document2.attr("bdo", false);
      document1.html();
      document0.updateMetaCharsetElement(false);
      document1.updateMetaCharsetElement(false);
      Element element0 = document2.prependElement("[\"dCA*Mrpf*;");
      document0.getElementsByAttribute("im#");
      element0.toString();
      element0.html((MockFileWriter) null);
      document2.getElementsByAttributeValueEnding("menu", "article");
      element0.dataset();
      document2.getElementsByAttributeValueStarting("article", "`r");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1267);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, (-2046), document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Tag.valueOf("      ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "0K?`a Y?JW";
      Document document0 = new Document("0K?`a Y?JW");
      Element element0 = document0.append("0K?`a Y?JW");
      document0.getElementsMatchingText("0K?`a Y?JW");
      Element element1 = document0.appendTo(element0);
      // Undeclared exception!
      element1.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = new Document("\"RS");
      Document document1 = (Document)document0.empty();
      document1.siblingNodes();
      document1.nodelistChanged();
      String string0 = "Et#n:@:l*o0hFB";
      // Undeclared exception!
      try { 
        document0.is("Et#n:@:l*o0hFB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Et#n:@:l*o0hFB': unexpected token at ':@:l*o0hFB'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("(1wG]\"^?o&w]mC6");
      Document document1 = (Document)document0.toggleClass("</");
      Document document2 = document0.clone();
      Document document3 = (Document)document2.appendTo(document1);
      assertEquals(1, document0.childNodeSize());
      
      Document document4 = document1.normalise();
      MockFile mockFile0 = new MockFile("</", "]/&Yd.Bim#;y\"6o>T");
      MockFile mockFile1 = new MockFile("</");
      mockFile1.getCanonicalFile();
      document4.parentNode = (Node) document3;
      document3.getElementsByAttributeValueStarting(" > ", "(1wG]\"^?o&w]mC6");
      document0.getElementsByClass("(1wG]\"^?o&w]mC6");
      document1.children();
      document0.data();
      assertEquals("(1wG]\"^?o&w]mC6", document0.baseUri());
  }
}
