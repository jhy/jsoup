/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 21:58:59 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Parser parser1 = parser0.setTrackErrors(1313);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("title", "title");
      Document document1 = document0.normalise();
      document1.tagName("title");
      document1.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("title");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // title
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Ik>}*{[");
      Document document1 = document0.normalise();
      document0.appendChild(document1);
      // Undeclared exception!
      document0.normalise();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Ik>}*{[");
      Document document1 = document0.normalise();
      document0.appendChild(document1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".+mpSg>");
      document2.id();
      document0.parser((Parser) null);
      document2.nodeName();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("Ik>}*{[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ik>}*{[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = new Document("Ik>}*{[");
      Document document1 = document0.normalise();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Element element0 = document0.appendChild(document1);
      element0.siblingIndex = 95;
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document1.text("Ik>}*{[");
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.id();
      document2.nodeName();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("Ik>}*{[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ik>}*{[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.encoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
      document0.title();
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.location();
      Document.OutputSettings.Syntax.values();
      document0.updateMetaCharsetElement();
      document0.normalise();
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#text");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(65);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings3.clone();
      Document document0 = Parser.parseBodyFragmentRelaxed("#text", "#text");
      document0.cssSelector();
      document_OutputSettings2.outline(true);
      document0.head();
      document0.outputSettings(document_OutputSettings3);
      document0.outputSettings();
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("S<Qv]ExL8O,(QuPRT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.S<Qv]ExL8O,(QuPRT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.encoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
      document0.title();
      document0.getElementById("title");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.location();
      Document.OutputSettings.Syntax.values();
      document0.normalise();
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.s5leAt.Evaluator$TagEndsWith", "org.jsoup.s5leAt.Evaluator$TagEndsWith");
      document0.title("org.jsoup.s5leAt.Evaluator$TagEndsWith");
      document0.head();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.encoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
      document0.title();
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.text("");
      Parser parser0 = Parser.htmlParser();
      document0.parser(parser0);
      document0.location();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = new Document("~vW$v^yx)0=|!");
      Document document1 = document0.ownerDocument();
      document1.body();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("title", "title");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.body();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "body");
      Document document0 = Parser.parse("lq[Avn&YO%G", "lq[Avn&YO%G");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.createElement("html");
      document0.createElement("html");
      document1.nodeName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "body";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "body");
      Document document0 = Parser.parseBodyFragmentRelaxed("S", "S");
      document0.getElementsByIndexLessThan(1462);
      Document document1 = document0.parser((Parser) null);
      document1.prepend("S");
      document0.title();
      document1.ownText();
      document1.title("S");
      String string1 = "YzkF^#QyAbWu'r\"";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "                    ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parse("n7uS0~p/Lrbf#", "");
      document0.siblingIndex = 152;
      document0.siblingElements();
      document0.childNodes();
      document0.shallowClone();
      document0.normalise();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$OutputSettings", "org.jsoup.nodes.Document$OutputSettings");
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document1 = document0.parser(parser1);
      Document document2 = document1.normalise();
      document2.createElement("org.jsoup.nodes.Document$OutputSettings");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.prettyPrint();
      Parser.htmlParser();
      String string0 = "&quot;";
      String string1 = "";
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("!\b^j*#rS ");
      document0.normalise();
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        document0.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("z|6<U");
      document0.outerHtml();
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset((Charset) null);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.escapeMode(entities_EscapeMode0);
      document_OutputSettings5.charset();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("Ik>}*{[");
      Document document1 = document0.normalise();
      document0.appendChild(document1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.id();
      document2.nodeName();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("Ik>}*{[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ik>}*{[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.encoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
      document0.title();
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.location();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("a");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(29);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Charset charset0 = document0.charset();
      document_OutputSettings0.charset(charset0);
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document0.outputSettings(document_OutputSettings2);
      // Undeclared exception!
      try { 
        Charset.forName("a");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // a
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Charset charset0 = document1.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.encoder();
      document_OutputSettings0.outline(false);
      Document document0 = Parser.parse("BP+Z", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.nodeName();
      document_OutputSettings0.outline();
      document_OutputSettings0.indentAmount();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset((Charset) null);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.indentAmount(2353);
      document_OutputSettings5.escapeMode();
      Document document0 = Parser.parse("30", "");
      document0.updateMetaCharsetElement(true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("^");
      Charset charset0 = document0.charset();
      Charset.defaultCharset();
      String string0 = "yJMyx";
      Charset.isSupported("yJMyx");
      charset0.encode("yJMyx");
      document0.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      charset0.aliases();
      document_OutputSettings0.encoder();
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-1215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document0 = new Document("#root");
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.html;
      document_OutputSettings3.syntax(document_OutputSettings_Syntax1);
      document0.updateMetaCharsetElement();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "I]3~.gWy\"+kZzd_}<3h";
      Document document0 = new Document("I]3~.gWy\"+kZzd_}<3h");
      document0.toString();
      // Undeclared exception!
      try { 
        document0.title("I]3~.gWy\"+kZzd_}<3h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "g%94yd0xk8s";
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "g%94yd0xk8s");
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document_OutputSettings0.encoder();
      document_OutputSettings0.prepareEncoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
      document0.title();
      document0.getElementById("title");
      Charset charset0 = document0.charset();
      document0.empty();
      document0.charset(charset0);
      document0.location();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      document_OutputSettings1.indentAmount(61);
      document_OutputSettings3.prettyPrint(false);
      Charset.defaultCharset();
      Document document0 = new Document("utf");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.nodeName();
      // Undeclared exception!
      try { 
        document0.title("org.jsoup.select.Evaluator$AttributeStarting");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "1Y";
      Document document0 = Document.createShell("1Y");
      document0.hasSameValue("1Y");
      String string1 = "String input must not be null";
      Element element0 = document0.append("String input must not be null");
      Element element1 = document0.prependChild(element0);
      document0.appendChild(element1);
      document0.elementSiblingIndex();
      // Undeclared exception!
      document0.title("1Y");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("encoding");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document0.charset();
      document_OutputSettings0.outline(true);
      document0.updateMetaCharsetElement(true);
      String string0 = "org.jsoup.nodes.Document$QuirksMode";
      // Undeclared exception!
      try { 
        document0.text("org.jsoup.nodes.Document$QuirksMode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(318);
      Document document0 = parser1.parseInput("", "");
      document0.body();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("limitedQuirks");
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("[r5ueeV:O'JnY]6c~_");
      Document document1 = document0.parser((Parser) null);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.parser();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("x3z=\"7QR*I(~tmU8", "x3z=\"7QR*I(~tmU8");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.quirksMode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset(" 6>.)^6ZHMPU$FJkMH");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  6>.)^6ZHMPU$FJkMH
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document.QuirksMode.values();
      Document document0 = new Document(":JxF\"o6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document_OutputSettings1.prettyPrint(false);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(1216);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.prettyPrint(false);
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings3.encoder();
      document_OutputSettings5.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings5.indentAmount(39);
      document0.head();
      document_OutputSettings6.indentAmount();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.outline(false);
      document_OutputSettings5.syntax();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      document_OutputSettings2.encoder();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document.QuirksMode.values();
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.head();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = null;
      try {
        document0 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Document$OutputSettings", "summary");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.clone();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("qz|hEi");
      Document document1 = document0.clone();
      document1.location();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L", "L");
      Document document1 = document0.ownerDocument();
      document1.normalise();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tDKl\"? XFVsOJ}s", "tDKl\"? XFVsOJ}s");
      document0.location();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("%");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.updateMetaCharsetElement();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "+CN-Qe I.G6/_";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = new Document("+CN-Qe I.G6/_");
      document0.charset();
      // Undeclared exception!
      try { 
        Document.OutputSettings.Syntax.valueOf("+CN-Qe I.G6/_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.OutputSettings.Syntax.+CN-Qe I.G6/_
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.nodes.LeafNode");
      Document document0 = Document.createShell("noQuirks");
      document0.parser();
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("#document");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document_OutputSettings0.encoder();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document document2 = document1.ownerDocument();
      Document document3 = document2.normalise();
      document3.outerHtml();
      document2.title("xml");
      document3.parser();
      document2.parser();
      document2.charset();
      document_OutputSettings0.outline(false);
      document1.nodeName();
      document2.outerHtml();
      document2.parser();
      document1.normalise();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Document.createShell("publicId");
      Document document1 = new Document("publicId");
      document0.toggleClass("publicId");
      document1.text();
      document0.childNodesAsArray();
      Document.QuirksMode.values();
      document0.parser();
      document0.location();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("Fr6Ugyd`3sv<10jJub");
      document1.getElementsByAttributeValueMatching("publicId", pattern0);
      // Undeclared exception!
      try { 
        document1.title("applet");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#text");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(65);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings3.clone();
      Document document0 = Parser.parseBodyFragmentRelaxed("#text", "#text");
      document0.cssSelector();
      document0.head();
      document0.outputSettings(document_OutputSettings3);
      document0.outputSettings();
      // Undeclared exception!
      try { 
        Document.OutputSettings.Syntax.valueOf("#document");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.OutputSettings.Syntax.#document
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("Ik>}*{[");
      document0.appendChild(document0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.id();
      document1.nodeName();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("Ik>}*{[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ik>}*{[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.base;
      document_OutputSettings0.escapeMode(entities_EscapeMode1);
      document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(false);
      document_OutputSettings0.indentAmount(0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.indentAmount(0);
      document_OutputSettings5.escapeMode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("q3", "_@PT");
      document0.outerHtml();
      Document.createShell("");
      document_OutputSettings0.clone();
      document0.quirksMode();
      document0.nodeName();
      document_OutputSettings0.encoder();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.encoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
      document0.title();
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.location();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(722);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings4.coreCharset = entities_CoreCharset0;
      String string0 = ";*G4Q1~)";
      // Undeclared exception!
      try { 
        Charset.forName(";*G4Q1~)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;*G4Q1~)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("dl", "dl");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      document2.nodeName();
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("dl");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dl
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings2.charset(charset0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.prepareEncoder();
      document_OutputSettings1.encoder();
      // Undeclared exception!
      try { 
        document_OutputSettings2.indentAmount((-81));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
