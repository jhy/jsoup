/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 22:03:12 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded(".", ".");
      dataNode0.doSetBaseUri("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentType documentType0 = new DocumentType((String) null, "W.Q!nCXNA5K", "K4Y[%", "W.Q!nCXNA5K", "W.Q!nCXNA5K");
      documentType0.coreValue((String) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", true);
      xmlDeclaration0.hasAttr("PZm'");
      xmlDeclaration0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode(",)K %^&jG_", "org.jsoup.nodes.LeafNode");
      textNode0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("'", "");
      comment0.hasAttr("org.jsoup.nodes.LeafNode");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.coreValue();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("output", "output");
      textNode0.coreValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", true);
      xmlDeclaration0.coreValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("'", "");
      comment0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataNode dataNode0 = new DataNode("Cv#", "");
      dataNode0.baseUri();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataNode dataNode0 = new DataNode("name");
      dataNode0.setSiblingIndex(294);
      dataNode0.attr("name", "dt/DiE");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("XCwQ6_2i-K=_", "^Y5]\"N)x.U", "^Y5]\"N)x.U", "NiMpk+).{o?)");
      documentType0.attr("^Y5]\"N)x.U", "XCwQ6_2i-K=_");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("raA3)#cJyHp3", "raA3)#cJyHp3", "raA3)#cJyHp3", " ", "|)v WQPs!bh#=QQ");
      // Undeclared exception!
      try { 
        documentType0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode("#doctype");
      // Undeclared exception!
      try { 
        textNode0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode("AH");
      textNode0.setParentNode(textNode0);
      // Undeclared exception!
      textNode0.attr("&$Ki/$Ma", "0RFbh");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode("!/@0^6cjUA>|B_8Nqi");
      // Undeclared exception!
      try { 
        textNode0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.nodes.LeafNode", "org.jsoup.nodes.LeafNode");
      // Undeclared exception!
      try { 
        dataNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.LeafNode");
      cDataNode0.attributes();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(")", ":rqYm5h%0A0y8t~[WrQ", true);
      xmlDeclaration0.attr("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("9^P", "i&m4/a_8@7~/u.7", true);
      xmlDeclaration0.absUrl("9^P");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#root");
      cDataNode0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#root");
      cDataNode0.removeAttr("#root");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#root");
      cDataNode0.splitText(0);
  }
}
