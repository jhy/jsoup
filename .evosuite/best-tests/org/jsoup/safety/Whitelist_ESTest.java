/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 21:49:00 GMT 2018
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "I,r}@BgN_M((J'e;e&=";
      stringArray0[1] = "I,r}@BgN_M((J'e;e&=";
      Whitelist whitelist1 = whitelist0.removeAttributes("I,r}@BgN_M((J'e;e&=", stringArray0);
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      Whitelist whitelist3 = whitelist2.removeTags(stringArray0);
      whitelist0.removeTags(stringArray0);
      whitelist3.getEnforcedAttributes("org.jsoup.select.Evaluator$ContainsText");
      whitelist3.addTags(stringArray0);
      Whitelist.basic();
      Whitelist whitelist4 = whitelist3.preserveRelativeLinks(true);
      whitelist4.addAttributes("+pdn-7(CuEpL<dF~", stringArray0);
      Whitelist.relaxed();
      whitelist1.isSafeTag("I,r}@BgN_M((J'e;e&=");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.getEnforcedAttributes("#");
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("#");
      whitelist_AttributeValue0.equals(whitelist_AttributeValue0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "I%y.5;~/";
      stringArray0[1] = "#H$4";
      stringArray0[2] = "#H$4";
      stringArray0[3] = "#H$4";
      stringArray0[4] = "#H$4";
      stringArray0[5] = "#H$4";
      stringArray0[6] = "#H$4";
      stringArray0[7] = "#H$4";
      stringArray0[8] = "#H$4";
      Whitelist whitelist1 = whitelist0.addAttributes("#H$4", stringArray0);
      whitelist1.isSafeTag("dt");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("&7J(`c?aT_>ZQjCx", "em", "em");
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("&7J(`c?aT_>ZQjCx", "hYs");
      whitelist2.isSafeTag("&7J(`c?aT_>ZQjCx");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "I,r}@BgN_M((J'e;e&=";
      stringArray0[1] = "I,r}@BgN_M((J'e;e&=";
      Whitelist whitelist1 = whitelist0.removeAttributes("I,r}@BgN_M((J'e;e&=", stringArray0);
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      Whitelist whitelist3 = whitelist2.removeTags(stringArray0);
      whitelist0.removeTags(stringArray0);
      whitelist3.getEnforcedAttributes("org.jsoup.select.Evaluator$ContainsText");
      whitelist3.addTags(stringArray0);
      Whitelist.basic();
      Whitelist whitelist4 = whitelist3.preserveRelativeLinks(false);
      whitelist4.addAttributes("+pdn-7(CuEpL<dF~", stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("3", "3", "3");
      whitelist1.getEnforcedAttributes("3");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3";
      Whitelist whitelist2 = whitelist0.addTags(stringArray0);
      whitelist2.isSafeTag("");
      String string0 = null;
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols((String) null, (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String string0 = null;
      // Undeclared exception!
      try { 
        whitelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("x\"':w", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = "i";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("i", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "%";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%";
      Whitelist whitelist1 = whitelist0.addProtocols("%", "%", stringArray0);
      Whitelist.basic();
      String string1 = "0VOYg+cdg'TKOvJ]g@p";
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("%", "0VOYg+cdg'TKOvJ]g@p", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = null;
      Element element0 = null;
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute((String) null, (Element) null, (Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("");
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("");
      Whitelist whitelist0 = Whitelist.basic();
      // Undeclared exception!
      try { 
        whitelist0.addProtocols("", "", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2g~K>!p(1X";
      stringArray0[1] = "2g~K>!p(1X";
      stringArray0[2] = "2g~K>!p(1X";
      stringArray0[3] = "2g~K>!p(1X";
      stringArray0[4] = "2g~K>!p(1X";
      Whitelist whitelist1 = whitelist0.addAttributes("2g~K>!p(1X", stringArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        whitelist1.addAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7/I~y";
      Whitelist whitelist1 = whitelist0.addAttributes("7/I~y", stringArray0);
      Whitelist whitelist2 = whitelist1.preserveRelativeLinks(false);
      whitelist2.removeEnforcedAttribute("7/I~y", "PW1E\"tY");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "O";
      Whitelist.AttributeKey.valueOf("O");
      Whitelist whitelist0 = Whitelist.simpleText();
      String string1 = "J*?f'LfUln`Pk%+(";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ",Rcc&9";
      stringArray0[2] = "J*?f'LfUln`Pk%+(";
      stringArray0[3] = "J*?f'LfUln`Pk%+(";
      stringArray0[4] = "J*?f'LfUln`Pk%+(";
      stringArray0[5] = "pMC";
      stringArray0[6] = "Xzkjdey";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        whitelist0.addProtocols("Xzkjdey", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("3Q5Kb=", "K2jP#~5aBq2?:M=)", "3Q5Kb=");
      whitelist1.addEnforcedAttribute("3Q5Kb=", "eS%y9[rD", "K2jP#~5aBq2?:M=)");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "caption";
      stringArray0[1] = "3E$Bb4pPb`UX-,r_Kw)";
      stringArray0[2] = "caption";
      stringArray0[3] = "jm6\"Jwvi4wbGUG)`s";
      stringArray0[4] = "caption";
      Whitelist whitelist1 = whitelist0.addProtocols("3E$Bb4pPb`UX-,r_Kw)", "caption", stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      whitelist2.getEnforcedAttributes("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.jsoup.select.Evaluator$Attribute";
      stringArray0[1] = "org.jsoup.select.Evaluator$Attribute";
      stringArray0[2] = "org.jsoup.select.Evaluator$Attribute";
      stringArray0[3] = "org.jsoup.select.Evaluator$Attribute";
      whitelist0.removeAttributes("org.jsoup.select.Evaluator$Attribute", stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "k0lw4VfV4";
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("k0lw4VfV4");
      Whitelist whitelist0 = Whitelist.relaxed();
      String string1 = ".";
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("k0lw4VfV4", ".");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k0lw4VfV4";
      // Undeclared exception!
      try { 
        whitelist1.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.getEnforcedAttributes("c`O;AD@[Cibt>6x}w");
      String string0 = "P$T7{^3kn@;-}m=l83";
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("P$T7{^3kn@;-}m=l83");
      Whitelist.TagName.valueOf("P$T7{^3kn@;-}m=l83");
      whitelist_TagName0.toString();
      Whitelist whitelist1 = Whitelist.relaxed();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P$T7{^3kn@;-}m=l83";
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.removeEnforcedAttribute("9e~5`n2@%", "9e~5`n2@%");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ON0:a";
      stringArray0[1] = "ON0:a";
      Whitelist whitelist1 = whitelist0.removeAttributes("ON0:a", stringArray0);
      whitelist1.getEnforcedAttributes("ON0:a");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      boolean boolean0 = true;
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        whitelist0.removeEnforcedAttribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("br");
      Whitelist.TagName.valueOf("");
      whitelist_TagName0.toString();
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "br";
      stringArray0[1] = "br";
      stringArray0[2] = "br";
      stringArray0[3] = "br";
      stringArray0[4] = "br";
      stringArray0[5] = "br";
      stringArray0[6] = "";
      stringArray0[7] = "br";
      // Undeclared exception!
      try { 
        whitelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      String string0 = "";
      // Undeclared exception!
      try { 
        whitelist1.addEnforcedAttribute("", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "XB&E*I,of{$Ug";
      stringArray0[1] = "XB&E*I,of{$Ug";
      stringArray0[2] = "required";
      stringArray0[3] = "required";
      stringArray0[4] = "required";
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("XB&E*I,of{$Ug", "required", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      assertNotNull(whitelist0);
      
      // Undeclared exception!
      try { 
        whitelist0.removeEnforcedAttribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      assertNotNull(whitelist0);
      
      boolean boolean0 = whitelist0.isSafeTag("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("1v]C1", "1v]C1", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("k*LcHJ*");
      assertNotNull(whitelist_AttributeKey0);
      assertEquals("k*LcHJ*", whitelist_AttributeKey0.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey1 = Whitelist.AttributeKey.valueOf("k*LcHJ*");
      assertTrue(whitelist_AttributeKey1.equals((Object)whitelist_AttributeKey0));
      assertNotNull(whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey1, whitelist_AttributeKey0);
      assertEquals("k*LcHJ*", whitelist_AttributeKey1.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey2 = Whitelist.AttributeKey.valueOf("k*LcHJ*");
      assertTrue(whitelist_AttributeKey2.equals((Object)whitelist_AttributeKey0));
      assertTrue(whitelist_AttributeKey2.equals((Object)whitelist_AttributeKey1));
      assertNotNull(whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeKey2, whitelist_AttributeKey0);
      assertNotSame(whitelist_AttributeKey2, whitelist_AttributeKey1);
      assertEquals("k*LcHJ*", whitelist_AttributeKey2.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey3 = Whitelist.AttributeKey.valueOf("k*LcHJ*");
      assertTrue(whitelist_AttributeKey3.equals((Object)whitelist_AttributeKey2));
      assertTrue(whitelist_AttributeKey3.equals((Object)whitelist_AttributeKey0));
      assertTrue(whitelist_AttributeKey3.equals((Object)whitelist_AttributeKey1));
      assertNotNull(whitelist_AttributeKey3);
      assertNotSame(whitelist_AttributeKey3, whitelist_AttributeKey0);
      assertNotSame(whitelist_AttributeKey3, whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeKey3, whitelist_AttributeKey1);
      assertEquals("k*LcHJ*", whitelist_AttributeKey3.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey4 = Whitelist.AttributeKey.valueOf("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      assertFalse(whitelist_AttributeKey4.equals((Object)whitelist_AttributeKey0));
      assertFalse(whitelist_AttributeKey4.equals((Object)whitelist_AttributeKey2));
      assertFalse(whitelist_AttributeKey4.equals((Object)whitelist_AttributeKey3));
      assertFalse(whitelist_AttributeKey4.equals((Object)whitelist_AttributeKey1));
      assertNotNull(whitelist_AttributeKey4);
      assertNotSame(whitelist_AttributeKey4, whitelist_AttributeKey0);
      assertNotSame(whitelist_AttributeKey4, whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeKey4, whitelist_AttributeKey3);
      assertNotSame(whitelist_AttributeKey4, whitelist_AttributeKey1);
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", whitelist_AttributeKey4.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey5 = Whitelist.AttributeKey.valueOf("small");
      assertFalse(whitelist_AttributeKey5.equals((Object)whitelist_AttributeKey0));
      assertFalse(whitelist_AttributeKey5.equals((Object)whitelist_AttributeKey1));
      assertFalse(whitelist_AttributeKey5.equals((Object)whitelist_AttributeKey3));
      assertFalse(whitelist_AttributeKey5.equals((Object)whitelist_AttributeKey2));
      assertFalse(whitelist_AttributeKey5.equals((Object)whitelist_AttributeKey4));
      assertNotNull(whitelist_AttributeKey5);
      assertNotSame(whitelist_AttributeKey5, whitelist_AttributeKey0);
      assertNotSame(whitelist_AttributeKey5, whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey5, whitelist_AttributeKey3);
      assertNotSame(whitelist_AttributeKey5, whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeKey5, whitelist_AttributeKey4);
      assertEquals("small", whitelist_AttributeKey5.toString());
      
      boolean boolean0 = whitelist_AttributeKey0.equals((Object) null);
      assertTrue(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey3));
      assertTrue(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey1));
      assertFalse(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey5));
      assertTrue(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey2));
      assertFalse(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey4));
      assertFalse(boolean0);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey3);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey5);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey4);
      assertEquals("k*LcHJ*", whitelist_AttributeKey0.toString());
      
      Whitelist whitelist0 = Whitelist.simpleText();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("k*LcHJ*", "readonly");
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      Whitelist whitelist2 = Whitelist.none();
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertNotNull(whitelist2);
      assertNotSame(whitelist2, whitelist0);
      assertNotSame(whitelist2, whitelist1);
      
      Attributes attributes0 = whitelist1.getEnforcedAttributes("k*LcHJ*");
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertNotNull(attributes0);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      assertNotSame(whitelist1, whitelist2);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "k*LcHJ*";
      stringArray0[1] = "k*LcHJ*";
      stringArray0[2] = "scope";
      stringArray0[3] = "small";
      stringArray0[4] = "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&";
      stringArray0[5] = "^eMBEFcuDtV#";
      stringArray0[6] = "k*LcHJ*";
      Whitelist whitelist3 = whitelist0.addProtocols("k*LcHJ*", "^eMBEFcuDtV#", stringArray0);
      assertFalse(whitelist3.equals((Object)whitelist2));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertNotNull(whitelist3);
      assertNotSame(whitelist3, whitelist2);
      assertSame(whitelist3, whitelist1);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertEquals(7, stringArray0.length);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "readonly";
      Whitelist whitelist4 = whitelist0.addAttributes("readonly", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertNotNull(whitelist4);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(whitelist4, whitelist2);
      assertSame(whitelist4, whitelist3);
      assertSame(whitelist4, whitelist0);
      assertSame(whitelist4, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist4);
      assertSame(whitelist0, whitelist1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = whitelist0.isSafeTag("KL]WdD");
      assertTrue(boolean1 == boolean0);
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(boolean1);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist4);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("");
      assertNotNull(whitelist_TagName0);
      assertEquals("", whitelist_TagName0.toString());
      
      Whitelist whitelist0 = new Whitelist();
      assertNotNull(whitelist0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute("", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("W%N%z,Ji ");
      assertNotNull(whitelist_TagName0);
      assertEquals("W%N%z,Ji ", whitelist_TagName0.toString());
      
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("W%N%z,Ji ");
      assertNotNull(whitelist_AttributeValue0);
      assertEquals("W%N%z,Ji ", whitelist_AttributeValue0.toString());
      
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "W%N%z,Ji ";
      stringArray0[1] = "W%N%z,Ji ";
      stringArray0[2] = "W%N%z,Ji ";
      stringArray0[3] = "W%N%z,Ji ";
      Whitelist whitelist1 = whitelist0.addProtocols("W%N%z,Ji ", "W%N%z,Ji ", stringArray0);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      assertEquals(4, stringArray0.length);
      
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      assertNotNull(whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertEquals(4, stringArray0.length);
      
      String string0 = "a";
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols((String) null, "a", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("A`");
      assertNotNull(whitelist_Protocol0);
      assertEquals("A`", whitelist_Protocol0.toString());
      
      Whitelist whitelist0 = Whitelist.basicWithImages();
      assertNotNull(whitelist0);
      
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("A`");
      assertNotNull(whitelist_AttributeKey0);
      assertEquals("A`", whitelist_AttributeKey0.toString());
      
      Whitelist.Protocol whitelist_Protocol1 = Whitelist.Protocol.valueOf("A`");
      assertTrue(whitelist_Protocol1.equals((Object)whitelist_Protocol0));
      assertNotNull(whitelist_Protocol1);
      assertNotSame(whitelist_Protocol1, whitelist_Protocol0);
      assertEquals("A`", whitelist_Protocol1.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey1 = Whitelist.AttributeKey.valueOf("figure");
      assertFalse(whitelist_AttributeKey1.equals((Object)whitelist_AttributeKey0));
      assertNotNull(whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey1, whitelist_AttributeKey0);
      assertEquals("figure", whitelist_AttributeKey1.toString());
      
      Whitelist.AttributeKey whitelist_AttributeKey2 = Whitelist.AttributeKey.valueOf("y2TyM=@@oX!p");
      assertFalse(whitelist_AttributeKey2.equals((Object)whitelist_AttributeKey1));
      assertFalse(whitelist_AttributeKey2.equals((Object)whitelist_AttributeKey0));
      assertNotNull(whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeKey2, whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey2, whitelist_AttributeKey0);
      assertEquals("y2TyM=@@oX!p", whitelist_AttributeKey2.toString());
      
      boolean boolean0 = whitelist_Protocol0.equals(whitelist_AttributeKey0);
      assertTrue(whitelist_Protocol0.equals((Object)whitelist_Protocol1));
      assertFalse(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey1));
      assertFalse(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey2));
      assertFalse(boolean0);
      assertNotSame(whitelist_Protocol0, whitelist_Protocol1);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey2);
      assertEquals("A`", whitelist_Protocol0.toString());
      assertEquals("A`", whitelist_AttributeKey0.toString());
      
      Whitelist whitelist1 = Whitelist.basicWithImages();
      assertFalse(whitelist1.equals((Object)whitelist0));
      assertNotNull(whitelist1);
      assertNotSame(whitelist1, whitelist0);
      
      Whitelist whitelist2 = Whitelist.relaxed();
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertNotNull(whitelist2);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "code";
      stringArray0[1] = "code";
      stringArray0[2] = "c.S<yrC^";
      stringArray0[3] = "figure";
      stringArray0[4] = "A`";
      stringArray0[5] = "code";
      stringArray0[6] = "A`";
      Whitelist whitelist3 = whitelist1.removeAttributes("code", stringArray0);
      assertFalse(whitelist3.equals((Object)whitelist2));
      assertFalse(whitelist3.equals((Object)whitelist0));
      assertFalse(whitelist1.equals((Object)whitelist0));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertNotNull(whitelist3);
      assertNotSame(whitelist3, whitelist2);
      assertNotSame(whitelist3, whitelist0);
      assertSame(whitelist3, whitelist1);
      assertNotSame(whitelist1, whitelist0);
      assertNotSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist3);
      assertEquals(7, stringArray0.length);
      
      Whitelist whitelist4 = Whitelist.basic();
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertNotNull(whitelist4);
      assertNotSame(whitelist4, whitelist0);
      assertNotSame(whitelist4, whitelist1);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist3);
      
      Whitelist whitelist5 = Whitelist.basicWithImages();
      assertFalse(whitelist5.equals((Object)whitelist0));
      assertFalse(whitelist5.equals((Object)whitelist4));
      assertFalse(whitelist5.equals((Object)whitelist2));
      assertFalse(whitelist5.equals((Object)whitelist3));
      assertFalse(whitelist5.equals((Object)whitelist1));
      assertNotNull(whitelist5);
      assertNotSame(whitelist5, whitelist0);
      assertNotSame(whitelist5, whitelist4);
      assertNotSame(whitelist5, whitelist2);
      assertNotSame(whitelist5, whitelist3);
      assertNotSame(whitelist5, whitelist1);
      
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("allowfullscreen");
      assertNotNull(whitelist_AttributeValue0);
      assertEquals("allowfullscreen", whitelist_AttributeValue0.toString());
      
      Whitelist.AttributeValue whitelist_AttributeValue1 = Whitelist.AttributeValue.valueOf("");
      assertFalse(whitelist_AttributeValue1.equals((Object)whitelist_AttributeValue0));
      assertNotNull(whitelist_AttributeValue1);
      assertNotSame(whitelist_AttributeValue1, whitelist_AttributeValue0);
      assertEquals("", whitelist_AttributeValue1.toString());
      
      Whitelist.AttributeValue whitelist_AttributeValue2 = Whitelist.AttributeValue.valueOf("figure");
      assertFalse(whitelist_AttributeValue2.equals((Object)whitelist_AttributeValue0));
      assertFalse(whitelist_AttributeValue2.equals((Object)whitelist_AttributeValue1));
      assertNotNull(whitelist_AttributeValue2);
      assertNotSame(whitelist_AttributeValue2, whitelist_AttributeValue0);
      assertNotSame(whitelist_AttributeValue2, whitelist_AttributeValue1);
      assertEquals("figure", whitelist_AttributeValue2.toString());
      
      boolean boolean1 = whitelist_AttributeKey0.equals(whitelist_AttributeValue0);
      assertFalse(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey1));
      assertFalse(whitelist_AttributeKey0.equals((Object)whitelist_AttributeKey2));
      assertFalse(whitelist_AttributeValue0.equals((Object)whitelist_AttributeValue2));
      assertFalse(whitelist_AttributeValue0.equals((Object)whitelist_AttributeValue1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey0, whitelist_AttributeKey2);
      assertNotSame(whitelist_AttributeValue0, whitelist_AttributeValue2);
      assertNotSame(whitelist_AttributeValue0, whitelist_AttributeValue1);
      assertEquals("A`", whitelist_AttributeKey0.toString());
      assertEquals("allowfullscreen", whitelist_AttributeValue0.toString());
      
      Whitelist whitelist6 = whitelist2.addTags(stringArray0);
      assertFalse(whitelist6.equals((Object)whitelist4));
      assertFalse(whitelist6.equals((Object)whitelist3));
      assertFalse(whitelist6.equals((Object)whitelist1));
      assertFalse(whitelist6.equals((Object)whitelist5));
      assertFalse(whitelist6.equals((Object)whitelist0));
      assertFalse(whitelist2.equals((Object)whitelist5));
      assertFalse(whitelist2.equals((Object)whitelist3));
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertFalse(whitelist2.equals((Object)whitelist4));
      assertNotNull(whitelist6);
      assertNotSame(whitelist6, whitelist4);
      assertNotSame(whitelist6, whitelist3);
      assertNotSame(whitelist6, whitelist1);
      assertSame(whitelist6, whitelist2);
      assertNotSame(whitelist6, whitelist5);
      assertNotSame(whitelist6, whitelist0);
      assertNotSame(whitelist2, whitelist5);
      assertNotSame(whitelist2, whitelist3);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      assertNotSame(whitelist2, whitelist4);
      assertSame(whitelist2, whitelist6);
      assertEquals(7, stringArray0.length);
      
      Whitelist whitelist7 = whitelist6.addProtocols("Eg\"x:HcaA,=YO_#<{M", "code", stringArray0);
      assertFalse(whitelist6.equals((Object)whitelist4));
      assertFalse(whitelist6.equals((Object)whitelist3));
      assertFalse(whitelist6.equals((Object)whitelist1));
      assertFalse(whitelist6.equals((Object)whitelist5));
      assertFalse(whitelist6.equals((Object)whitelist0));
      assertFalse(whitelist2.equals((Object)whitelist5));
      assertFalse(whitelist2.equals((Object)whitelist3));
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertFalse(whitelist2.equals((Object)whitelist4));
      assertFalse(whitelist7.equals((Object)whitelist4));
      assertFalse(whitelist7.equals((Object)whitelist1));
      assertFalse(whitelist7.equals((Object)whitelist5));
      assertFalse(whitelist7.equals((Object)whitelist3));
      assertFalse(whitelist7.equals((Object)whitelist0));
      assertNotNull(whitelist7);
      assertNotSame(whitelist6, whitelist4);
      assertNotSame(whitelist6, whitelist3);
      assertNotSame(whitelist6, whitelist1);
      assertSame(whitelist6, whitelist2);
      assertNotSame(whitelist6, whitelist5);
      assertSame(whitelist6, whitelist7);
      assertNotSame(whitelist6, whitelist0);
      assertNotSame(whitelist2, whitelist5);
      assertNotSame(whitelist2, whitelist3);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      assertNotSame(whitelist2, whitelist4);
      assertSame(whitelist2, whitelist7);
      assertSame(whitelist2, whitelist6);
      assertSame(whitelist7, whitelist6);
      assertNotSame(whitelist7, whitelist4);
      assertNotSame(whitelist7, whitelist1);
      assertNotSame(whitelist7, whitelist5);
      assertNotSame(whitelist7, whitelist3);
      assertNotSame(whitelist7, whitelist0);
      assertSame(whitelist7, whitelist2);
      assertEquals(7, stringArray0.length);
      
      Whitelist.AttributeKey whitelist_AttributeKey3 = Whitelist.AttributeKey.valueOf("c.S<yrC^");
      assertFalse(whitelist_AttributeKey3.equals((Object)whitelist_AttributeKey0));
      assertFalse(whitelist_AttributeKey3.equals((Object)whitelist_AttributeKey1));
      assertFalse(whitelist_AttributeKey3.equals((Object)whitelist_AttributeKey2));
      assertNotNull(whitelist_AttributeKey3);
      assertNotSame(whitelist_AttributeKey3, whitelist_AttributeKey0);
      assertNotSame(whitelist_AttributeKey3, whitelist_AttributeKey1);
      assertNotSame(whitelist_AttributeKey3, whitelist_AttributeKey2);
      assertEquals("c.S<yrC^", whitelist_AttributeKey3.toString());
      
      Whitelist whitelist8 = Whitelist.simpleText();
      assertFalse(whitelist8.equals((Object)whitelist0));
      assertFalse(whitelist8.equals((Object)whitelist7));
      assertFalse(whitelist8.equals((Object)whitelist6));
      assertFalse(whitelist8.equals((Object)whitelist1));
      assertFalse(whitelist8.equals((Object)whitelist3));
      assertFalse(whitelist8.equals((Object)whitelist5));
      assertFalse(whitelist8.equals((Object)whitelist4));
      assertFalse(whitelist8.equals((Object)whitelist2));
      assertNotNull(whitelist8);
      assertNotSame(whitelist8, whitelist0);
      assertNotSame(whitelist8, whitelist7);
      assertNotSame(whitelist8, whitelist6);
      assertNotSame(whitelist8, whitelist1);
      assertNotSame(whitelist8, whitelist3);
      assertNotSame(whitelist8, whitelist5);
      assertNotSame(whitelist8, whitelist4);
      assertNotSame(whitelist8, whitelist2);
      
      String string0 = whitelist_AttributeValue0.toString();
      assertFalse(whitelist_AttributeValue0.equals((Object)whitelist_AttributeValue2));
      assertFalse(whitelist_AttributeValue0.equals((Object)whitelist_AttributeValue1));
      assertNotNull(string0);
      assertEquals("allowfullscreen", string0);
      assertNotSame(whitelist_AttributeValue0, whitelist_AttributeValue2);
      assertNotSame(whitelist_AttributeValue0, whitelist_AttributeValue1);
      assertEquals("allowfullscreen", whitelist_AttributeValue0.toString());
      
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute("A`", "", "code");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[5];
      String string0 = "dd";
      stringArray0[0] = "dd";
      String string1 = ")_-fpZ9BX5BQ\\{";
      stringArray0[1] = ")_-fpZ9BX5BQ{";
      String string2 = "pre";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute(")_-fpZ9BX5BQ{", "dd", "pre");
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes(")_-fpZ9BX5BQ{", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "]RL[m1m\\o";
      stringArray0[1] = "]RL[m1mo";
      // Undeclared exception!
      try { 
        whitelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("qD", "qD", "qD");
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      Whitelist whitelist2 = Whitelist.simpleText();
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertNotNull(whitelist2);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qD";
      stringArray0[1] = "qD";
      Whitelist whitelist3 = whitelist0.addAttributes("qD", stringArray0);
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist3.equals((Object)whitelist2));
      assertNotNull(whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist3, whitelist1);
      assertNotSame(whitelist3, whitelist2);
      assertEquals(2, stringArray0.length);
      
      Whitelist whitelist4 = Whitelist.relaxed();
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertNotNull(whitelist4);
      assertNotSame(whitelist4, whitelist3);
      assertNotSame(whitelist4, whitelist0);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ht[]!,vyVp>Y>uI";
      stringArray0[1] = "ht[]!,vyVp>Y>uI";
      stringArray0[2] = "ht[]!,vyVp>Y>uI";
      stringArray0[3] = "ht[]!,vyVp>Y>uI";
      stringArray0[4] = "ht[]!,vyVp>Y>uI";
      stringArray0[5] = "ht[]!,vyVp>Y>uI";
      stringArray0[6] = "ht[]!,vyVp>Y>uI";
      stringArray0[7] = "ht[]!,vyVp>Y>uI";
      Whitelist whitelist1 = whitelist0.removeAttributes("ht[]!,vyVp>Y>uI", stringArray0);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      assertEquals(8, stringArray0.length);
      
      Whitelist whitelist2 = whitelist1.preserveRelativeLinks(false);
      assertNotNull(whitelist2);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertEquals(8, stringArray0.length);
      
      Whitelist whitelist3 = whitelist2.addProtocols("ht[]!,vyVp>Y>uI", "ht[]!,vyVp>Y>uI", stringArray0);
      assertNotNull(whitelist3);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist1, whitelist3);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist3);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist3, whitelist1);
      assertSame(whitelist3, whitelist2);
      assertEquals(8, stringArray0.length);
      
      Attributes attributes0 = whitelist3.getEnforcedAttributes("ht[]!,vyVp>Y>uI");
      assertNotNull(attributes0);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist1, whitelist3);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist3);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist3, whitelist1);
      assertSame(whitelist3, whitelist2);
      assertEquals(8, stringArray0.length);
      assertEquals(0, attributes0.size());
      
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("ht[]!,vyVp>Y>uI");
      assertNotNull(whitelist_AttributeValue0);
      assertEquals("ht[]!,vyVp>Y>uI", whitelist_AttributeValue0.toString());
      
      Whitelist whitelist4 = Whitelist.relaxed();
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertNotNull(whitelist4);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist1);
      assertNotSame(whitelist4, whitelist3);
      assertNotSame(whitelist4, whitelist0);
      
      Whitelist whitelist5 = whitelist1.removeProtocols("ht[]!,vyVp>Y>uI", "ht[]!,vyVp>Y>uI", stringArray0);
      assertFalse(whitelist5.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist1.equals((Object)whitelist4));
      assertNotNull(whitelist5);
      assertNotSame(whitelist5, whitelist4);
      assertSame(whitelist5, whitelist2);
      assertSame(whitelist5, whitelist3);
      assertSame(whitelist5, whitelist0);
      assertSame(whitelist5, whitelist1);
      assertNotSame(whitelist0, whitelist4);
      assertSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist1, whitelist5);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist1, whitelist4);
      assertEquals(8, stringArray0.length);
      
      Whitelist whitelist6 = whitelist2.addEnforcedAttribute("ht[]!,vyVp>Y>uI", "h5", "ht[]!,vyVp>Y>uI");
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist6.equals((Object)whitelist4));
      assertFalse(whitelist1.equals((Object)whitelist4));
      assertFalse(whitelist2.equals((Object)whitelist4));
      assertNotNull(whitelist6);
      assertNotSame(whitelist0, whitelist4);
      assertSame(whitelist0, whitelist6);
      assertSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist6, whitelist0);
      assertSame(whitelist6, whitelist5);
      assertNotSame(whitelist6, whitelist4);
      assertSame(whitelist6, whitelist3);
      assertSame(whitelist6, whitelist2);
      assertSame(whitelist6, whitelist1);
      assertSame(whitelist1, whitelist6);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist1, whitelist5);
      assertNotSame(whitelist1, whitelist4);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist2, whitelist4);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist6);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist3);
      assertSame(whitelist2, whitelist5);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        whitelist4.removeProtocols("a Q5sg[a} ", "ht[]!,vyVp>Y>uI", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      assertNotNull(whitelist0);
      
      boolean boolean0 = whitelist0.isSafeTag("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      String string0 = "";
      String string1 = "b\"qN%yw@=l44!$V";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("", "b\"qN%yw@=l44!$V", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String string0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
