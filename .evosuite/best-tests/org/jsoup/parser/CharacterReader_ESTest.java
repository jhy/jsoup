/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 21:44:24 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "I7u(~+Q?m<+oaOA4lmS";
      CharacterReader characterReader0 = new CharacterReader("I7u(~+Q?m<+oaOA4lmS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("I", string1);
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      charArray0[0] = '}';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(1, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("7u(~+Q?m", string2);
      assertNotNull(string2);
      assertEquals(9, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(9, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      charArray0[1] = '=';
      String string3 = characterReader0.consumeToEnd();
      assertEquals("<+oaOA4lmS", string3);
      assertNotNull(string3);
      assertEquals(19, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean3 = characterReader0.isEmpty();
      assertTrue(boolean3);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      charArray0[2] = 'v';
      int int0 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int0);
      assertEquals(19, characterReader0.pos());
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(19, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = characterReader0.consumeTagName();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(19, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      int int1 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int1);
      assertEquals(19, characterReader0.pos());
      assertTrue(int1 == int0);
      
      charArray0[3] = 'M';
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '=', 'v', 'M'}, charArray0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      int int2 = characterReader0.nextIndexOf('3');
      assertEquals((-1), int2);
      assertEquals(19, characterReader0.pos());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean5 = characterReader0.matches("");
      assertTrue(boolean5);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = '+';
      charArray0[4] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:Pp", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean2);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = characterReader0.toString();
      assertEquals("z=I|M\"|", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = characterReader0.nextIndexOf('z');
      assertEquals(0, int0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean4);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("z", string3);
      assertNotNull(string3);
      assertEquals(6, characterReader0.pos());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean5 = characterReader0.matchesAnySorted(charArray0);
      assertTrue(boolean5);
      assertEquals(6, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("2i597");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("2i597", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matchConsume("");
      assertTrue(boolean2);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.toString();
      assertEquals("2i597", string3);
      assertNotNull(string3);
      assertEquals(0, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char char0 = characterReader0.consume();
      assertEquals('2', char0);
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = '+';
      charArray0[4] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:Pp", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.isEmpty();
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertTrue(boolean2);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean3);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean4);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      String string2 = characterReader0.toString();
      assertEquals("z=I|M\"|", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = characterReader0.nextIndexOf('z');
      assertEquals(0, int0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean5);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      
      boolean boolean6 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean6);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\"Sb>b?m4");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("\"Sb>b?m4", string0);
      assertNotNull(string0);
      assertEquals(8, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("\"Sb>b?m4");
      assertFalse(boolean0);
      assertEquals(8, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(9, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(9, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('L');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = characterReader0.containsIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean4);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesLetter();
      assertTrue(boolean5);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lA[S;\"F<Z");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("lA", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("BZF,(OW\"lbRw");
      assertFalse(boolean0);
      assertEquals(2, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'N';
      characterReader0.unconsume();
      assertEquals(1, characterReader0.pos());
      
      charArray0[2] = 'C';
      charArray0[3] = '@';
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("A[S;\"F<Z", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'8', 'N', 'C', '@'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matches("BZF,(OW\"lbRw");
      assertFalse(boolean1);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(9, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = characterReader0.consumeDigitSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(9, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = characterReader0.matchesAny((char[]) null);
      assertFalse(boolean2);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchesAny((char[]) null);
      assertFalse(boolean3);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = '+';
      charArray0[4] = 'z';
      charArray0[6] = '$';
      int int0 = characterReader0.nextIndexOf('=');
      assertEquals(6, int0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('X', char0);
      assertEquals(1, characterReader0.pos());
      
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("G:Pp", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean2);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = characterReader0.toString();
      assertEquals("z=I|M\"|", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = characterReader0.nextIndexOf('z');
      assertEquals(0, int1);
      assertEquals(5, characterReader0.pos());
      assertFalse(int1 == int0);
      
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean4);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("z", string3);
      assertNotNull(string3);
      assertEquals(6, characterReader0.pos());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XL{RQ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('X', char0);
      assertEquals(1, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('L', char1);
      assertEquals(2, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(2, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf(':');
      assertEquals((-1), int0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G0K[3QMfl/C!Ekk6");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("G0K[3QMfl", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(9, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeData();
      assertEquals("/C!Ekk6", string2);
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(16, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      String string4 = characterReader0.toString();
      assertEquals("G0K[3QMfl/C!Ekk6", string4);
      assertNotNull(string4);
      assertEquals(0, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      char char0 = characterReader0.consume();
      assertEquals('G', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("/C!Ekk6");
      assertEquals(8, int0);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      
      String string5 = characterReader0.consumeDigitSequence();
      assertEquals("0", string5);
      assertNotNull(string5);
      assertEquals(2, characterReader0.pos());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      int int1 = characterReader0.nextIndexOf('U');
      assertEquals((-1), int1);
      assertEquals(2, characterReader0.pos());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G0K[3QMfl/C!Ekk6");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("G0K[3QMfl", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("/C!Ekk6", string1);
      assertNotNull(string1);
      assertEquals(16, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(16, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.toString();
      assertEquals("G0K[3QMfl/C!Ekk6", string3);
      assertNotNull(string3);
      assertEquals(0, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      char char0 = characterReader0.consume();
      assertEquals('G', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("/C!Ekk6");
      assertEquals(8, int0);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches('0');
      assertTrue(boolean2);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      characterReader0.advance();
      assertEquals(2, characterReader0.pos());
      
      char char1 = characterReader0.current();
      assertEquals('K', char1);
      assertEquals(2, characterReader0.pos());
      assertFalse(char1 == char0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeData();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      char char0 = 'n';
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('n');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("rg.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(30, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(30, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matches("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(31, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean2);
      assertEquals((-1), characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R_LZ%g{E");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('`');
      assertEquals((-1), int0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '`';
      int int1 = characterReader0.nextIndexOf("R_LZ%g{E");
      assertEquals(0, int1);
      assertEquals(0, characterReader0.pos());
      assertFalse(int1 == int0);
      
      charArray0[1] = '`';
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "I7u(~+Q?m<+oaOA4lmS";
      CharacterReader characterReader0 = new CharacterReader("I7u(~+Q?m<+oaOA4lmS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '}';
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '=';
      charArray0[1] = ')';
      charArray0[2] = '}';
      charArray0[3] = ':';
      charArray0[4] = '7';
      charArray0[5] = 'A';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1015), (-1015), "b8vLP");
      assertFalse(boolean0);
      assertEquals(17, charArray0.length);
      
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '=';
      charArray0[1] = ')';
      charArray0[2] = '}';
      charArray0[3] = ':';
      charArray0[4] = '7';
      charArray0[5] = 'A';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1015), (-1015), "b8vLP");
      assertFalse(boolean0);
      assertEquals(17, charArray0.length);
      
      CharacterReader characterReader0 = new CharacterReader("b8vLP");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("b8vLP", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 67, (-3637), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "k";
      CharacterReader characterReader0 = new CharacterReader("k");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('o', char0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeTo('a');
      assertEquals("org.jsoup.p", string2);
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = characterReader0.matches('S');
      assertFalse(boolean0);
      assertEquals(11, characterReader0.pos());
      
      String string3 = characterReader0.consumeLetterSequence();
      assertEquals("arser", string3);
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = characterReader0.matches('Y');
      assertFalse(boolean1);
      assertEquals(16, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      int int0 = characterReader0.nextIndexOf('S');
      assertEquals((-1), int0);
      assertEquals(16, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(16, characterReader0.pos());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("org.jsoup.parser.CharacterReader");
      assertFalse(boolean2);
      assertEquals(16, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matches("org.jsoup.parser.CharacterReader");
      assertFalse(boolean3);
      assertEquals(16, characterReader0.pos());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int1 = characterReader0.pos();
      assertEquals(16, int1);
      assertEquals(16, characterReader0.pos());
      assertFalse(int1 == int0);
      
      String string5 = characterReader0.consumeLetterSequence();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(16, characterReader0.pos());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = characterReader0.consumeTo('+');
      assertEquals(".CharacterReader", string6);
      assertNotNull(string6);
      assertEquals(32, characterReader0.pos());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertFalse(boolean4);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("S1 oq!:,YCeyz");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("S1 oq!:,YCeyz");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('&');
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("S1 oq!:,YCeyz", string0);
      assertNotNull(string0);
      assertEquals(13, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean2);
      assertEquals(13, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = characterReader0.nextIndexOf('-');
      assertEquals((-1), int0);
      assertEquals(13, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('l');
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      int int1 = characterReader0.pos();
      assertEquals(0, int1);
      assertEquals(0, characterReader0.pos());
      assertFalse(int1 == int0);
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("S1", string2);
      assertNotNull(string2);
      assertEquals(2, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.consumeHexSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(2, characterReader0.pos());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean5 = characterReader0.matches('T');
      assertFalse(boolean5);
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      String string4 = characterReader0.consumeHexSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(2, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int2 = characterReader0.nextIndexOf('K');
      assertEquals((-1), int2);
      assertEquals(2, characterReader0.pos());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      charArray0[1] = '8';
      charArray0[2] = '-';
      charArray0[3] = '-';
      boolean boolean6 = CharacterReader.rangeEquals(charArray0, 7, 7, "");
      assertFalse(boolean6);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '8', '-', '-'}, charArray0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      
      boolean boolean7 = CharacterReader.rangeEquals(charArray0, 7, 0, "");
      assertTrue(boolean7);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '8', '-', '-'}, charArray0);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      
      String string5 = characterReader0.consumeToAny(charArray0);
      assertEquals(" oq!:,YCeyz", string5);
      assertNotNull(string5);
      assertEquals(13, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '8', '-', '-'}, charArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I7u(~+Q?m<+oaOA4lmS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '}';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("I7u(~+Q?m", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(9, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.containsIgnoreCase("I7u(~+Q?m");
      assertFalse(boolean3);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("<+oaOA4lmS", string1);
      assertNotNull(string1);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      charArray0[1] = 'P';
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(19, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean4 = characterReader0.isEmpty();
      assertTrue(boolean4);
      assertEquals(19, characterReader0.pos());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      charArray0[2] = 'v';
      int int0 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int0);
      assertEquals(19, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(19, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(19, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int1);
      assertEquals(19, characterReader0.pos());
      assertTrue(int1 == int0);
      
      charArray0[3] = 'M';
      boolean boolean5 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean5);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', 'P', 'v', 'M'}, charArray0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      
      int int2 = characterReader0.nextIndexOf('3');
      assertEquals((-1), int2);
      assertEquals(19, characterReader0.pos());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean6 = characterReader0.matches("");
      assertTrue(boolean6);
      assertEquals(19, characterReader0.pos());
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      
      characterReader0.unconsume();
      assertEquals(18, characterReader0.pos());
      
      String string5 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("S", string5);
      assertNotNull(string5);
      assertEquals(19, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = characterReader0.consumeTo(' ');
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(19, characterReader0.pos());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean7 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertFalse(boolean7);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      
      boolean boolean8 = characterReader0.isEmpty();
      assertTrue(boolean8);
      assertEquals(19, characterReader0.pos());
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean7);
      
      String string7 = characterReader0.consumeLetterSequence();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(19, characterReader0.pos());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = characterReader0.toString();
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(19, characterReader0.pos());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "7*5:U$c$xFMoGeBr|iK";
      CharacterReader characterReader0 = new CharacterReader("7*5:U$c$xFMoGeBr|iK");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("7*5:U$c$xFMoGeBr|iK");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('L');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("OM");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      char[] charArray0 = new char[0];
      boolean boolean5 = CharacterReader.rangeEquals(charArray0, 7, 12, "");
      assertFalse(boolean5);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 7, 13, "Must be false");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '=';
      charArray0[1] = ')';
      charArray0[2] = '}';
      charArray0[3] = ':';
      charArray0[4] = '7';
      charArray0[5] = 'A';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1015), (-1015), "b8vLP");
      assertFalse(boolean0);
      assertEquals(17, charArray0.length);
      
      CharacterReader characterReader0 = new CharacterReader("b8vLP");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("b8", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[1] = '~';
      charArray0[1] = '\u001E';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      charArray0[4] = '+';
      charArray0[5] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u001E', 'P', 'S', '+', 'z', '$', 'w'}, charArray0);
      
      boolean boolean0 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean0);
      assertEquals(3, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean1);
      assertEquals(3, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean2);
      assertEquals(3, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = characterReader0.toString();
      assertEquals("Ppz=I|M\"|", string1);
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("Ppz", string2);
      assertNotNull(string2);
      assertEquals(6, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = '+';
      charArray0[4] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:Pp", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean2);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string2 = characterReader0.toString();
      assertEquals("z=I|M\"|", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = characterReader0.nextIndexOf('z');
      assertEquals(0, int0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '\"';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      charArray0[4] = '+';
      charArray0[5] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '\"', 'P', 'S', '+', 'z', '$', 'w'}, charArray0);
      
      boolean boolean0 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean0);
      assertEquals(3, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean1);
      assertEquals(3, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean2);
      assertEquals(3, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = characterReader0.toString();
      assertEquals("Ppz=I|M\"|", string1);
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeLetterSequence();
      assertEquals("Ppz", string2);
      assertNotNull(string2);
      assertEquals(6, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I/9sy4)R\"!5[xC&");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("I/9sy4)R\"!5[xC&", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.toString();
      assertEquals("I/9sy4)R\"!5[xC&", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("}0G<0s.{?$\"f,`");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('Q');
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      char char0 = characterReader0.consume();
      assertEquals('I', char0);
      assertEquals(1, characterReader0.pos());
      
      String string2 = characterReader0.consumeData();
      assertEquals("/9sy4)R\"!5[xC", string2);
      assertNotNull(string2);
      assertEquals(14, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = characterReader0.consumeHexSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(14, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = characterReader0.matchConsume("I/9sy4)R\"!5[xC&");
      assertFalse(boolean2);
      assertEquals(14, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = characterReader0.pos();
      assertEquals(14, int0);
      assertEquals(14, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      String string4 = characterReader0.consumeTo('Q');
      assertEquals("&", string4);
      assertNotNull(string4);
      assertEquals(15, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      charArray0[1] = 'Q';
      charArray0[2] = 'r';
      charArray0[3] = 'Q';
      charArray0[4] = 'I';
      charArray0[5] = 'Q';
      charArray0[6] = 'I';
      charArray0[7] = 'Q';
      boolean boolean3 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean3);
      assertEquals(15, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'I', 'Q', 'r', 'Q', 'I', 'Q', 'I', 'Q'}, charArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string5 = characterReader0.consumeTo('Q');
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(15, characterReader0.pos());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(15, characterReader0.pos());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = characterReader0.consumeData();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(15, characterReader0.pos());
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean4 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean4);
      assertEquals(15, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'I', 'Q', 'r', 'Q', 'I', 'Q', 'I', 'Q'}, charArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      String string8 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(15, characterReader0.pos());
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      
      String string9 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string9);
      assertNotNull(string9);
      assertEquals(15, characterReader0.pos());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "I7u(~+Q?m<+oaOA4lmS";
      CharacterReader characterReader0 = new CharacterReader("I7u(~+Q?m<+oaOA4lmS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '}';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("I7u(~+Q?m", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(9, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      charArray0[1] = '=';
      String string2 = characterReader0.consumeToEnd();
      assertEquals("<+oaOA4lmS", string2);
      assertNotNull(string2);
      assertEquals(19, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = characterReader0.isEmpty();
      assertTrue(boolean3);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      charArray0[2] = 'v';
      int int0 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int0);
      assertEquals(19, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(19, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(19, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int1);
      assertEquals(19, characterReader0.pos());
      assertTrue(int1 == int0);
      
      charArray0[3] = 'M';
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '=', 'v', 'M'}, charArray0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("k", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("k");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('o');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      int int2 = characterReader0.nextIndexOf('N');
      assertEquals((-1), int2);
      assertEquals(1, characterReader0.pos());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("k");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('k', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean1 = characterReader0.matches('\uFFFF');
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches("k");
      assertTrue(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[4];
      boolean boolean3 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = '/';
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'k', 'k', 'k', '/'}, charArray0);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.toString();
      assertEquals("k", string3);
      assertNotNull(string3);
      assertEquals(0, characterReader0.pos());
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo('[');
      assertEquals("&-],N", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("[:&58P", string3);
      assertNotNull(string3);
      assertEquals(11, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = characterReader0.consumeData();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(11, characterReader0.pos());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ToN;m5Q.}@iH3l");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'A';
      String string0 = characterReader0.consumeTo('A');
      assertEquals("ToN;m5Q.}@iH3l", string0);
      assertNotNull(string0);
      assertEquals(15, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(15, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean0);
      assertEquals(15, characterReader0.pos());
      
      char[] charArray0 = null;
      boolean boolean1 = characterReader0.isEmpty();
      assertTrue(boolean1);
      assertEquals(15, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeToAnySorted((char[]) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(15, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.consumeToAnySorted((char[]) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(15, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      String string4 = characterReader0.consumeToEnd();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(15, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean2 = characterReader0.isEmpty();
      assertTrue(boolean2);
      assertEquals(15, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = characterReader0.consumeTo("ToN;m5Q.}@iH3l");
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(15, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean3 = characterReader0.matchesDigit();
      assertFalse(boolean3);
      assertEquals(15, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string6 = characterReader0.consumeLetterSequence();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(15, characterReader0.pos());
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean4 = CharacterReader.rangeEquals((char[]) null, 82, 116, "");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchConsume("");
      assertTrue(boolean5);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '=';
      charArray0[1] = ')';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      charArray0[4] = '7';
      charArray0[5] = 'Q';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1015), (-1015), "b8vLP");
      assertFalse(boolean0);
      assertEquals(17, charArray0.length);
      
      CharacterReader characterReader0 = new CharacterReader("b8vLP");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("k^KQ|\"9a4x");
      assertEquals("b8vLP", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('=');
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '\"';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      charArray0[4] = '+';
      charArray0[5] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '\"', 'P', 'S', '+', 'z', '$', 'w'}, charArray0);
      
      boolean boolean0 = characterReader0.matches("XG:");
      assertFalse(boolean0);
      assertEquals(3, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean1);
      assertEquals(3, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean2);
      assertEquals(3, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(3, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string1 = characterReader0.toString();
      assertEquals("Ppz=I|M\"|", string1);
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertEquals(3, characterReader0.pos());
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G0K[3QMfl/C!Ekk6");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("G0K[3QMfl", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(9, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeData();
      assertEquals("/C!Ekk6", string2);
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(16, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      String string4 = characterReader0.toString();
      assertEquals("G0K[3QMfl/C!Ekk6", string4);
      assertNotNull(string4);
      assertEquals(0, characterReader0.pos());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      char char0 = characterReader0.consume();
      assertEquals('G', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("/C!Ekk6");
      assertEquals(8, int0);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      
      char char1 = characterReader0.current();
      assertEquals('0', char1);
      assertEquals(1, characterReader0.pos());
      assertFalse(char1 == char0);
      
      int int1 = characterReader0.pos();
      assertEquals(1, int1);
      assertEquals(1, characterReader0.pos());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertFalse(boolean1);
      assertEquals(11, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo('E');
      assertEquals("&-],N[:&58P", string2);
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'o';
      String string1 = characterReader0.consumeTo('o');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      char[] charArray0 = new char[5];
      boolean boolean0 = characterReader0.matches("");
      assertTrue(boolean0);
      assertEquals((-1), characterReader0.pos());
      
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '9';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("MQIWa._N kL<8A");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('L');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("Qt;");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = CharacterReader.maxBufferLen;
      assertEquals(32768, int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[23];
      charArray0[0] = '\\';
      charArray0[1] = 'I';
      charArray0[2] = 'X';
      charArray0[3] = 'v';
      charArray0[4] = 'u';
      charArray0[5] = 'D';
      charArray0[6] = 't';
      boolean boolean1 = characterReader0.matchesLetter();
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      charArray0[7] = '[';
      charArray0[8] = 'E';
      boolean boolean2 = CharacterReader.rangeEquals(charArray0, 32768, 32768, "&-],N[:&58P");
      assertFalse(boolean2);
      assertEquals(23, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = characterReader0.nextIndexOf('J');
      assertEquals((-1), int1);
      assertEquals(0, characterReader0.pos());
      assertFalse(int1 == int0);
      
      boolean boolean3 = characterReader0.containsIgnoreCase("&-],N[:&58P");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'V';
      charArray0[2] = 'b';
      charArray0[3] = 'r';
      charArray0[4] = 'u';
      charArray0[5] = 'D';
      charArray0[6] = 'b';
      charArray0[7] = '[';
      charArray0[8] = 'E';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, "&-],N[:&58P");
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'9', 'V', 'b', 'r', 'u', 'D', 'b', '[', 'E'}, charArray0);
      
      boolean boolean1 = characterReader0.containsIgnoreCase("&-],N[:&58P");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I7u(~+Q?m<+oaOA4lmS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '}';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("I7u(~+Q?m", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(9, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      charArray0[1] = '=';
      String string1 = characterReader0.consumeToEnd();
      assertEquals("<+oaOA4lmS", string1);
      assertNotNull(string1);
      assertEquals(19, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = characterReader0.isEmpty();
      assertTrue(boolean3);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      charArray0[2] = 'v';
      int int0 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int0);
      assertEquals(19, characterReader0.pos());
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(19, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(19, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int1);
      assertEquals(19, characterReader0.pos());
      assertTrue(int1 == int0);
      
      charArray0[3] = 'M';
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '=', 'v', 'M'}, charArray0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      int int2 = characterReader0.nextIndexOf('3');
      assertEquals((-1), int2);
      assertEquals(19, characterReader0.pos());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean5 = characterReader0.matches("");
      assertTrue(boolean5);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      
      characterReader0.unconsume();
      assertEquals(18, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("S", string4);
      assertNotNull(string4);
      assertEquals(19, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = characterReader0.consumeTo(' ');
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(19, characterReader0.pos());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean6 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertFalse(boolean6);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      
      boolean boolean7 = characterReader0.isEmpty();
      assertTrue(boolean7);
      assertEquals(19, characterReader0.pos());
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      
      String string6 = characterReader0.consumeLetterSequence();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(19, characterReader0.pos());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("S1 oq!:,YCeyz");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("S1 oq!:,YCeyz");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('&');
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("S1 oq!:,YCeyz", string0);
      assertNotNull(string0);
      assertEquals(13, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean2);
      assertEquals(13, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = characterReader0.nextIndexOf('-');
      assertEquals((-1), int0);
      assertEquals(13, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('l');
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("S1", string1);
      assertNotNull(string1);
      assertEquals(2, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      int int1 = characterReader0.pos();
      assertEquals(2, int1);
      assertEquals(2, characterReader0.pos());
      assertFalse(int1 == int0);
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(2, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(2, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = characterReader0.consumeHexSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(2, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean5 = characterReader0.matches('T');
      assertFalse(boolean5);
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '8';
      charArray0[2] = '-';
      charArray0[3] = '-';
      boolean boolean6 = CharacterReader.rangeEquals(charArray0, 7, 7, "");
      assertFalse(boolean6);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '8', '-', '-'}, charArray0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      
      boolean boolean7 = CharacterReader.rangeEquals(charArray0, 7, 2, "");
      assertFalse(boolean7);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '8', '-', '-'}, charArray0);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("V%{G.");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("@sl");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string0 = characterReader0.toString();
      assertEquals("V%{G.", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches("V%{G.");
      assertTrue(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char char0 = characterReader0.consume();
      assertEquals('V', char0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertFalse(boolean3);
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string1 = characterReader0.consumeTo('(');
      assertEquals("%{G.", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean4 = characterReader0.matchesIgnoreCase("xPfpi");
      assertFalse(boolean4);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      String string2 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'(', '(', '('}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'V';
      charArray1[2] = 'V';
      charArray1[3] = '(';
      charArray1[4] = 'C';
      charArray1[5] = '%';
      charArray1[6] = 'V';
      charArray1[7] = 'V';
      boolean boolean5 = CharacterReader.rangeEquals(charArray1, 3098, 3098, "4W`=tEr`ie+[G");
      assertFalse(boolean5);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'(', 'V', 'V', '(', 'C', '%', 'V', 'V'}, charArray1);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[1] = '$';
      charArray0[2] = '>';
      boolean boolean0 = characterReader0.containsIgnoreCase("Must be true");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      
      charArray0[3] = 'e';
      charArray0[4] = 'x';
      charArray0[5] = '.';
      boolean boolean1 = characterReader0.matches("");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      charArray0[6] = 'r';
      boolean boolean2 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'Z', '$', '>', 'e', 'x', '.', 'r'}, charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("k", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("k");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('N');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("k");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('k', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean1 = characterReader0.rangeEquals((-1), (-1), "");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches('\uFFFF');
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matches("k");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('L');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("org.jsoup.parser.CharacterReader");
      assertTrue(boolean1);
      assertEquals(32, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("org.jsoup.parser.CharacterReader");
      assertFalse(boolean2);
      assertEquals(32, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertFalse(boolean3);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.containsIgnoreCase("org.jsoup.parser.CharacterReader");
      assertFalse(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("rg.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(30, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(30, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matches("org.jsoup.UncheckedIOException");
      assertFalse(boolean2);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(31, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("org", string4);
      assertNotNull(string4);
      assertEquals(3, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = characterReader0.consumeToEnd();
      assertEquals(".jsoup.UncheckedIOException", string5);
      assertNotNull(string5);
      assertEquals(30, characterReader0.pos());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = characterReader0.consumeToEnd();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(30, characterReader0.pos());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = characterReader0.consumeLetterSequence();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(30, characterReader0.pos());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(30, characterReader0.pos());
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("^");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('N');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo("^");
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('^', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean1 = characterReader0.rangeEquals(70, 70, "");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches('\uFFFF');
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matches("^");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches('[');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("rg.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(30, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(30, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matches("org.jsoup.UncheckedIOException");
      assertFalse(boolean2);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(31, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      int int0 = characterReader0.pos();
      assertEquals(31, int0);
      assertEquals(31, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertFalse(boolean3);
      assertEquals(31, characterReader0.pos());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(31, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      
      String string5 = characterReader0.consumeToEnd();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(30, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      
      String string6 = characterReader0.consumeToEnd();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(30, characterReader0.pos());
      assertFalse(string6.equals((Object)string0));
      
      String string7 = characterReader0.consumeLetterSequence();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(30, characterReader0.pos());
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("^");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      char char1 = 'P';
      int int1 = characterReader0.nextIndexOf('P');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("^");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char2 = characterReader0.current();
      assertEquals('^', char2);
      assertEquals(0, characterReader0.pos());
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      boolean boolean1 = characterReader0.rangeEquals(70, 70, "");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      char char3 = '&';
      boolean boolean2 = characterReader0.matches('&');
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.isEmpty();
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = characterReader0.matches("^");
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("^");
      assertFalse(boolean1);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('N');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("^");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('^', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean2 = characterReader0.rangeEquals(70, 70, "");
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matches('\uFFFF');
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = characterReader0.matches('\uFFFF');
      assertFalse(boolean4);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4O+r$$$W");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('4', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(1, int0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("rg.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(30, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(30, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matches("org.jsoup.UncheckedIOException");
      assertFalse(boolean2);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      
      String string3 = characterReader0.consumeHexSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(31, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(31, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string5 = characterReader0.consumeLetterSequence();
      assertEquals("org", string5);
      assertNotNull(string5);
      assertEquals(3, characterReader0.pos());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = characterReader0.consumeToEnd();
      assertEquals(".jsoup.UncheckedIOException", string6);
      assertNotNull(string6);
      assertEquals(30, characterReader0.pos());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = characterReader0.consumeToEnd();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(30, characterReader0.pos());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = characterReader0.consumeLetterSequence();
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(30, characterReader0.pos());
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean4 = characterReader0.matches('=');
      assertFalse(boolean4);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'o';
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeTo('o');
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertTrue(string2.equals((Object)string0));
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '9';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("CFW!Ic'^x&XO");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('');
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[9];
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '<';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '@';
      charArray0[7] = '';
      charArray0[8] = '';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("CFW!Ic'^x&XO", string0);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'', '', '', '<', '', '', '@', '', ''}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean3 = characterReader0.matchesAnySorted(charArray1);
      assertFalse(boolean3);
      assertEquals(12, characterReader0.pos());
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      String string1 = characterReader0.consumeTo("org.jsoup.parser.CharacterReader");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(12, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'o';
      String string1 = characterReader0.consumeTo('o');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '9';
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("^");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('N');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("^");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('^', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean1 = characterReader0.rangeEquals(70, 70, "");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches('\uFFFF');
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matches("^");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('L');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo('E');
      assertEquals("&-],N[:&58P", string2);
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'J';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'d', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = characterReader0.matches("");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      charArray0[2] = '`';
      charArray0[3] = '4';
      charArray0[4] = 'J';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'d', 'J', '`', '4', 'J', '\u0000', '\u0000'}, charArray0);
      
      charArray0[5] = 'A';
      charArray0[6] = 'f';
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'d', 'J', '`', '4', 'J', 'A', 'f'}, charArray0);
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.rangeEquals(0, 0, "");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'d', 'J', '`', '4', 'J', 'A', 'f'}, charArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean5 = characterReader0.rangeEquals(0, 0, "");
      assertTrue(boolean5);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.consumeData();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      charArray0[4] = '+';
      charArray0[5] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '~', 'P', 'S', '+', 'z', '$', 'w'}, charArray0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean0);
      assertEquals(3, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('P');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean1);
      assertEquals(3, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string2 = characterReader0.toString();
      assertEquals("Ppz=I|M\"|", string2);
      assertNotNull(string2);
      assertEquals(3, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.helper.Validate");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('j');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.helper.Validate", string0);
      assertNotNull(string0);
      assertEquals(25, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAny((char[]) null);
      assertFalse(boolean1);
      assertEquals(25, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesAny((char[]) null);
      assertFalse(boolean2);
      assertEquals(25, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertFalse(boolean3);
      assertEquals(25, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = characterReader0.matches("");
      assertTrue(boolean4);
      assertEquals(25, characterReader0.pos());
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(26, characterReader0.pos());
      
      boolean boolean5 = characterReader0.isEmpty();
      assertTrue(boolean5);
      assertEquals(26, characterReader0.pos());
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      
      boolean boolean6 = characterReader0.matchesLetter();
      assertFalse(boolean6);
      assertEquals(26, characterReader0.pos());
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(26, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean7 = characterReader0.matchesLetter();
      assertFalse(boolean7);
      assertEquals(26, characterReader0.pos());
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      
      boolean boolean8 = characterReader0.matchesIgnoreCase("");
      assertFalse(boolean8);
      assertEquals(26, characterReader0.pos());
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean2);
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(25, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean9 = characterReader0.matchesDigit();
      assertFalse(boolean9);
      assertEquals(25, characterReader0.pos());
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean0);
      assertFalse(boolean9 == boolean4);
      
      boolean boolean10 = characterReader0.matches('V');
      assertFalse(boolean10);
      assertEquals(25, characterReader0.pos());
      assertTrue(boolean10 == boolean6);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean1);
      assertTrue(boolean10 == boolean9);
      assertTrue(boolean10 == boolean7);
      assertTrue(boolean10 == boolean0);
      assertFalse(boolean10 == boolean4);
      assertFalse(boolean10 == boolean5);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean2);
      
      boolean boolean11 = characterReader0.matchesLetter();
      assertFalse(boolean11);
      assertEquals(25, characterReader0.pos());
      assertTrue(boolean11 == boolean0);
      assertTrue(boolean11 == boolean10);
      assertFalse(boolean11 == boolean5);
      assertTrue(boolean11 == boolean2);
      assertTrue(boolean11 == boolean8);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean9);
      assertFalse(boolean11 == boolean4);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean6);
      assertTrue(boolean11 == boolean3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = 'I';
      charArray0[2] = 'b';
      charArray0[3] = 'r';
      charArray0[4] = 'u';
      charArray0[5] = 'D';
      charArray0[6] = 't';
      charArray0[7] = '[';
      charArray0[8] = 'E';
      boolean boolean1 = CharacterReader.rangeEquals(charArray0, 0, 0, "&-],N[:&58P");
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'I', 'b', 'r', 'u', 'D', 't', '[', 'E'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("&-],N[:&58P", string2);
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '}';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      charArray0[1] = '=';
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.isEmpty();
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      charArray0[2] = 'v';
      char char0 = 'M';
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("yO");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("yO");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "yO");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("yO", string1);
      assertNotNull(string1);
      assertEquals(2, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      characterReader0.advance();
      assertEquals(3, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(5, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\uFFFF';
      charArray0[1] = '\uFFFF';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\uFFFF';
      charArray1[1] = '\uFFFF';
      charArray1[2] = 'i';
      charArray1[3] = '\uFFFF';
      charArray1[4] = 'O';
      charArray1[5] = '\uFFFF';
      charArray1[6] = 'i';
      charArray1[7] = 'i';
      charArray1[8] = '\uFFFF';
      String string2 = characterReader0.consumeToAny(charArray1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', 'i', '\uFFFF', 'O', '\uFFFF', 'i', 'i', '\uFFFF'}, charArray1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      charArray0[2] = 'i';
      charArray0[3] = '#';
      charArray0[4] = 'x';
      charArray0[5] = '\uFFFF';
      charArray0[6] = '\uFFFF';
      charArray0[7] = '\uFFFF';
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', 'i', '#', 'x', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(charArray0, charArray1);
      
      String string4 = characterReader0.consumeTo('h');
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(2, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      
      String string5 = characterReader0.consumeTo("_il[vFkBqB\"");
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(2, characterReader0.pos());
      assertFalse(string5.equals((Object)string1));
      
      String string6 = characterReader0.consumeToEnd();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(2, characterReader0.pos());
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G0K[3QMfl/C!Ekk6");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("G0K[3QMfl", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(9, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeData();
      assertEquals("/C!Ekk6", string2);
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(16, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      String string4 = characterReader0.toString();
      assertEquals("G0K[3QMfl/C!Ekk6", string4);
      assertNotNull(string4);
      assertEquals(0, characterReader0.pos());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      char char0 = characterReader0.consume();
      assertEquals('G', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("/C!Ekk6");
      assertEquals(8, int0);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'o';
      String string1 = characterReader0.consumeTo('o');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        characterReader0.consumeTo(']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?T8{Cf");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'I';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-2556), (-3945), "");
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', 'I'}, charArray0);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("?T8{Cf", string1);
      assertNotNull(string1);
      assertEquals(7, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(7, characterReader0.pos());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', 'I'}, charArray0);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(7, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("F", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = 'q';
      charArray0[1] = 'l';
      charArray0[2] = '`';
      charArray0[3] = '6';
      charArray0[4] = '(';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'q', 'l', '`', '6', '('}, charArray0);
      
      String string2 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'q', 'l', '`', '6', '('}, charArray0);
      
      boolean boolean1 = CharacterReader.rangeEquals(charArray0, 718, 1, "org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'q', 'l', '`', '6', '('}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches("");
      assertTrue(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, characterReader0.pos());
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string4 = characterReader0.consumeData();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(1, characterReader0.pos());
      assertTrue(string4.equals((Object)string3));
      
      boolean boolean3 = characterReader0.matches("org.jsoup.UncheckedIOException");
      assertFalse(boolean3);
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = characterReader0.matchConsumeIgnoreCase("org.jsoup.parser.CharacterReader");
      assertFalse(boolean5);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      boolean boolean6 = characterReader0.matches("");
      assertTrue(boolean6);
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      
      characterReader0.advance();
      assertEquals(2, characterReader0.pos());
      
      boolean boolean7 = characterReader0.containsIgnoreCase("rV0^8|MkW:=-SjH");
      assertFalse(boolean7);
      assertEquals(2, characterReader0.pos());
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YGDd~I(z<?Qsm,%");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("YGDd~I(z", string0);
      assertNotNull(string0);
      assertEquals(8, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(8, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '^';
      charArray0[2] = 'm';
      charArray0[3] = 'o';
      charArray0[4] = '}';
      charArray0[5] = 'h';
      boolean boolean2 = CharacterReader.rangeEquals(charArray0, 0, (-467), "fwmhz_bf@t#");
      assertFalse(boolean2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'6', '^', 'm', 'o', '}', 'h'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = "2^q3*M>3IwvOD";
      char[] charArray0 = new char[4];
      char char0 = 'L';
      charArray0[0] = 'L';
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char char1 = 'G';
      charArray0[1] = 'G';
      charArray0[2] = '6';
      char char2 = 'L';
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      charArray0[3] = 'L';
      // Undeclared exception!
      try { 
        characterReader0.matchesAny(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(1, characterReader0.pos());
      
      char char1 = '#';
      characterReader0.unconsume();
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'x';
      charArray0[2] = 'Y';
      charArray0[3] = '?';
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'e', 'x', 'Y', '?'}, charArray0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'S';
      charArray1[1] = '4';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray1);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'S', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matches('e');
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(" @} |AzNm2#/@'1");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals(" @} |AzNm2#/@'1", string0);
      assertNotNull(string0);
      assertEquals(15, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(15, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('r');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(15, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matches('}');
      assertFalse(boolean1);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(15, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = characterReader0.containsIgnoreCase(" @} |AzNm2#/@'1");
      assertFalse(boolean2);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matches('r');
      assertFalse(boolean3);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(15, characterReader0.pos());
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(15, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = characterReader0.consumeDigitSequence();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(15, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = "org.jsoup.parser.CharacterReader";
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(16, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?=Ezn5MsEP.J(\"1");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("?=Ezn5MsEP.J(\"1", string0);
      assertNotNull(string0);
      assertEquals(15, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(15, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(15, characterReader0.pos());
      
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(15, characterReader0.pos());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      int int0 = characterReader0.pos();
      assertEquals(15, int0);
      assertEquals(15, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("IvQm: 21Gu'A");
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      int int1 = characterReader0.nextIndexOf("?=Ezn5MsEP.J(\"1");
      assertEquals(0, int1);
      assertEquals(0, characterReader0.pos());
      assertFalse(int1 == int0);
      
      boolean boolean4 = characterReader0.isEmpty();
      assertFalse(boolean4);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'e';
      charArray0[2] = 'T';
      charArray0[3] = '[';
      charArray0[4] = '?';
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("?=Ezn5MsEP.J(\"1", string3);
      assertNotNull(string3);
      assertEquals(15, characterReader0.pos());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'%', 'e', 'T', '[', '?'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean5 = characterReader0.matchesAny(charArray1);
      assertFalse(boolean5);
      assertEquals(15, characterReader0.pos());
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("t,VnIWy1_-r");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 's';
      charArray0[2] = 'n';
      charArray0[3] = 'V';
      charArray0[4] = '7';
      charArray0[5] = 'r';
      charArray0[6] = 'c';
      charArray0[7] = 'Y';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'v', 's', 'n', 'V', '7', 'r', 'c', 'Y'}, charArray0);
      
      boolean boolean1 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'v', 's', 'n', 'V', '7', 'r', 'c', 'Y'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("t,VnIWy1_-r");
      assertTrue(boolean2);
      assertEquals(11, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BXRD{HdHTSp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      String string0 = "n1cW6M+w";
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("n1cW6M+w");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '.';
      charArray0[2] = 'C';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'n', '.', 'C'}, charArray0);
      
      boolean boolean1 = characterReader0.isEmpty();
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{O_i");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'K';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', 'K'}, charArray0);
      
      String string0 = characterReader0.toString();
      assertEquals("{O_i", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0o;SP3:a9-WF7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("m[S%?w");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '(';
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', '('}, charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h[T)E-H.,Y");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("org.jsoup.UncheckedIOException");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = null;
      String string0 = characterReader0.consumeToEnd();
      assertEquals("h[T)E-H.,Y", string0);
      assertNotNull(string0);
      assertEquals(10, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAnySorted((char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(10, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(10, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertEquals(10, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      characterReader0.unconsume();
      assertEquals(9, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertTrue(boolean2);
      assertEquals(9, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matchConsume("");
      assertTrue(boolean3);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      char char0 = characterReader0.current();
      assertEquals('Y', char0);
      assertEquals(9, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      boolean boolean5 = characterReader0.matchesLetter();
      assertTrue(boolean5);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      
      String string3 = characterReader0.consumeHexSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(9, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean6 = CharacterReader.rangeEquals((char[]) null, 0, 0, "");
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      
      boolean boolean7 = characterReader0.matches("");
      assertTrue(boolean7);
      assertEquals(9, characterReader0.pos());
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'o';
      String string1 = characterReader0.consumeTo('o');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '9';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '\"';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      charArray0[4] = '+';
      charArray0[5] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '\"', 'P', 'S', '+', 'z', '$', 'w'}, charArray0);
      
      String string1 = "x+x/Vf-5m|*1aO|";
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeLetterSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.consumeDigitSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = null;
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\"5R+/R|(9sI-MS'-");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('O');
      assertEquals("\"5R+/R|(9sI-MS'-", string0);
      assertNotNull(string0);
      assertEquals(16, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('Q');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(16, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      characterReader0.unconsume();
      assertEquals(15, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(15, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("\"5R+/R|(9sI-MS'-");
      assertEquals((-1), int0);
      assertEquals(15, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('O');
      assertEquals((-1), int1);
      assertEquals(15, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.mark();
      assertEquals(15, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      String string2 = characterReader0.consumeToAny(charArray0);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      characterReader0.rewindToMark();
      assertEquals(15, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('-', char0);
      assertEquals(16, characterReader0.pos());
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = characterReader0.toString();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(16, characterReader0.pos());
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      characterReader0.mark();
      assertEquals(16, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'W';
      charArray0[2] = '0';
      charArray0[3] = 'W';
      charArray0[4] = 'u';
      charArray0[5] = 'K';
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("org.jso", string1);
      assertNotNull(string1);
      assertEquals(7, characterReader0.pos());
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'G', 'W', '0', 'W', 'u', 'K'}, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches(';');
      assertFalse(boolean1);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?T8{Cf");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-2556), (-3945), "");
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', '&'}, charArray0);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("?T8{Cf", string1);
      assertNotNull(string1);
      assertEquals(7, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(7, characterReader0.pos());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', '&'}, charArray0);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%.>usoX");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '#';
      charArray0[2] = ';';
      charArray0[3] = 'Z';
      charArray0[4] = 'c';
      charArray0[5] = '~';
      charArray0[6] = '+';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', '#', ';', 'Z', 'c', '~', '+'}, charArray0);
      
      int int0 = characterReader0.nextIndexOf("%.>usoX");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("%.>usoX");
      assertFalse(boolean1);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.isEmpty();
      assertFalse(boolean2);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.containsIgnoreCase("%.>usoX");
      assertFalse(boolean3);
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      char char0 = 'P';
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("^");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('\uFFFF');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('P');
      assertEquals((-1), int1);
      assertEquals(1, characterReader0.pos());
      assertTrue(int1 == int0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("^");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('^', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      boolean boolean1 = characterReader0.rangeEquals(70, 70, "");
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches('&');
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.isEmpty();
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = characterReader0.matches("^");
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Md");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = "Ol1:>g";
      String string1 = characterReader0.consumeTo("Ol1:>g");
      assertEquals("Md", string1);
      assertNotNull(string1);
      assertEquals(2, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char0 = '';
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(2, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = characterReader0.consumeTo('');
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(2, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = characterReader0.matchConsume("Md");
      assertFalse(boolean0);
      assertEquals(2, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      String string4 = characterReader0.consumeDigitSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(2, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      String string5 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(2, characterReader0.pos());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'', '', '', '', ''}, charArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = characterReader0.consumeDigitSequence();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(2, characterReader0.pos());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = characterReader0.toString();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(2, characterReader0.pos());
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ISr84&z.t\"ce[-r");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('/');
      assertEquals("ISr84&z.t\"ce[-r", string1);
      assertNotNull(string1);
      assertEquals(15, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(15, characterReader0.pos());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charArray0[0] = '/';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(15, characterReader0.pos());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertFalse(boolean1);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchConsume("`Ak?eSrsB");
      assertFalse(boolean2);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matches("");
      assertTrue(boolean3);
      assertEquals(15, characterReader0.pos());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(15, characterReader0.pos());
      
      boolean boolean4 = characterReader0.rangeEquals(1353, 1353, "ISr84&z.t\"ce[-r");
      assertFalse(boolean4);
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(15, characterReader0.pos());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      int int0 = characterReader0.nextIndexOf('U');
      assertEquals((-1), int0);
      assertEquals(15, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf("ISr84&z.t\"ce[-r");
      assertEquals((-1), int1);
      assertEquals(15, characterReader0.pos());
      assertTrue(int1 == int0);
      
      boolean boolean5 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean5);
      assertEquals(15, characterReader0.pos());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(15, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("org.jsoup.parser.CharacterReader");
      assertTrue(boolean0);
      assertEquals(32, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('P');
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(32, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase(";BwZSRlH#3Yr");
      assertFalse(boolean1);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string1 = characterReader0.consumeTo("#'?\"FWIC9q");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(32, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(32, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.consumeData();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(32, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(32, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean3 = characterReader0.matchesDigit();
      assertFalse(boolean3);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string5 = characterReader0.consumeToEnd();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(32, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertFalse(boolean4);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Zo63u!jlNA?ochzc3`{");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("Zo", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("Zo63u!jlNA?ochzc3`{");
      assertEquals((-1), int0);
      assertEquals(2, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'd';
      charArray0[2] = '/';
      charArray0[3] = '\"';
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals("63u!jlNA?ochzc3`{", string1);
      assertNotNull(string1);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', 'd', '/', '\"'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(19, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(19, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("W!`z+`19l ';4~");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches("W!`z+`19l ';4~");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("W!`z+`19l ';4~", string0);
      assertNotNull(string0);
      assertEquals(14, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(14, int0);
      assertEquals(14, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("W!`z+`19l ';4~");
      assertFalse(boolean1);
      assertEquals(14, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(14, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeTo("*t^i~-f");
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(14, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z>HsWT+%c|?");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("z>HsWT+%c|?", string0);
      assertNotNull(string0);
      assertEquals(11, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', 'v'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeTo('v');
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      characterReader0.advance();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nfeF");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('n', char0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals((-1), characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("fy=R6U8S/C3fDL*`I");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[1] = '7';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("fy", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      charArray0[2] = 'n';
      char char0 = characterReader0.current();
      assertEquals('=', char0);
      assertEquals(2, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('=', char1);
      assertEquals(3, characterReader0.pos());
      assertTrue(char1 == char0);
      
      charArray0[3] = ']';
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals("R6U8S/C3fDL*`I", string1);
      assertNotNull(string1);
      assertEquals(18, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', '7', 'n', ']'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(18, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = characterReader0.consumeLetterSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(18, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = characterReader0.toString();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(18, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = characterReader0.consumeToEnd();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(18, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = CharacterReader.rangeEquals(charArray0, 97, (-1190), "");
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', '7', 'n', ']'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(18, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', '7', 'n', ']'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = characterReader0.matches("");
      assertTrue(boolean3);
      assertEquals(18, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      charArray0[5] = '/';
      charArray0[6] = 'p';
      charArray0[7] = '{';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("org.jsou", string0);
      assertNotNull(string0);
      assertEquals(8, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'}', 'L', 'X', 'A', '=', '/', 'p', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("yO");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("yO");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "yO");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("yO", string1);
      assertNotNull(string1);
      assertEquals(2, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      characterReader0.advance();
      assertEquals(3, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(5, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\uFFFF';
      charArray0[1] = '\uFFFF';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\uFFFF';
      charArray1[1] = '\uFFFF';
      charArray1[2] = 'i';
      charArray1[3] = '\uFFFF';
      charArray1[4] = 'O';
      charArray1[5] = '\uFFFF';
      charArray1[6] = 'i';
      charArray1[7] = 'i';
      charArray1[8] = '\uFFFF';
      String string2 = characterReader0.consumeToAny(charArray1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', 'i', '\uFFFF', 'O', '\uFFFF', 'i', 'i', '\uFFFF'}, charArray1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      charArray0[2] = 'i';
      charArray0[3] = '#';
      charArray0[4] = 'x';
      charArray0[5] = '\uFFFF';
      charArray0[6] = '\uFFFF';
      charArray0[7] = '\uFFFF';
      String string3 = characterReader0.consumeTo('h');
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(2, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      
      String string4 = characterReader0.consumeTo("_il[vFkBqB\"");
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(2, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      
      String string5 = characterReader0.consumeToEnd();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(2, characterReader0.pos());
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('4');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = 'I';
      charArray0[2] = 'b';
      charArray0[3] = 'r';
      charArray0[4] = 'u';
      charArray0[5] = 'D';
      charArray0[6] = 't';
      charArray0[7] = '[';
      charArray0[8] = 'E';
      boolean boolean1 = CharacterReader.rangeEquals(charArray0, 0, 0, "&-],N[:&58P");
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'I', 'b', 'r', 'u', 'D', 't', '[', 'E'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = characterReader0.consumeData();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G?N~U`F*cEz_Ul3!/g}");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('/');
      assertEquals("G?N~U`F*cEz_Ul3!", string1);
      assertNotNull(string1);
      assertEquals(16, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("S1 oq!:,YCeyz");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("S1 oq!:,YCeyz");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('S', char0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('S');
      assertTrue(boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("S1 oq!:,YCeyz", string0);
      assertNotNull(string0);
      assertEquals(13, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean2);
      assertEquals(13, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = characterReader0.nextIndexOf('-');
      assertEquals((-1), int0);
      assertEquals(13, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('l');
      assertFalse(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("S1", string1);
      assertNotNull(string1);
      assertEquals(2, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      int int1 = characterReader0.pos();
      assertEquals(2, int1);
      assertEquals(2, characterReader0.pos());
      assertFalse(int1 == int0);
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertEquals(2, characterReader0.pos());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(2, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean5 = characterReader0.matchConsume("S1");
      assertFalse(boolean5);
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(2, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = characterReader0.consumeHexSequence();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(2, characterReader0.pos());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean6 = characterReader0.matches('T');
      assertFalse(boolean6);
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = '?';
      charArray0[2] = '-';
      charArray0[3] = '-';
      boolean boolean7 = CharacterReader.rangeEquals(charArray0, 7, 7, "");
      assertFalse(boolean7);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'S', '?', '-', '-'}, charArray0);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      
      boolean boolean8 = characterReader0.containsIgnoreCase("`:Rkaoj");
      assertFalse(boolean8);
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean7);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("^");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('N');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("^");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      char char1 = characterReader0.current();
      assertEquals('^', char1);
      assertEquals(0, characterReader0.pos());
      assertFalse(char1 == char0);
      
      char char2 = characterReader0.current();
      assertEquals('^', char2);
      assertEquals(0, characterReader0.pos());
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
      
      boolean boolean1 = characterReader0.matches('\uFFFF');
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matches("^");
      assertTrue(boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("^", string2);
      assertNotNull(string2);
      assertEquals(1, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      
      String string3 = characterReader0.consumeDigitSequence();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(1, characterReader0.pos());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = characterReader0.toString();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(1, characterReader0.pos());
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = characterReader0.consumeTagName();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(1, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertEquals(32, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('L');
      assertFalse(boolean0);
      assertEquals(32, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("");
      assertTrue(boolean1);
      assertEquals(32, characterReader0.pos());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertEquals(32, characterReader0.pos());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = characterReader0.consumeTo('L');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(32, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertFalse(boolean3);
      assertEquals(32, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string2 = characterReader0.consumeData();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(32, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertTrue(boolean4);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&-],N[:&58P");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("&-],N[:&58P", string1);
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(11, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("&-],N[:&58P");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'I';
      charArray0[2] = 'b';
      charArray0[3] = 'r';
      charArray0[4] = 'u';
      charArray0[5] = 'D';
      charArray0[6] = 't';
      charArray0[7] = '[';
      charArray0[8] = 'E';
      boolean boolean1 = CharacterReader.rangeEquals(charArray0, 0, 0, "&-],N[:&58P");
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'9', 'I', 'b', 'r', 'u', 'D', 't', '[', 'E'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("&-],N[:&58P", string2);
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'9', 'I', 'b', 'r', 'u', 'D', 't', '[', 'E'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I7u(~+Q?m<+oaOA4lmS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '}';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1);
      assertEquals(0, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("I", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("7u(~+Q?m", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean2);
      assertEquals(9, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      charArray0[1] = '=';
      String string2 = characterReader0.consumeToEnd();
      assertEquals("<+oaOA4lmS", string2);
      assertNotNull(string2);
      assertEquals(19, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = characterReader0.isEmpty();
      assertTrue(boolean3);
      assertEquals(19, characterReader0.pos());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      charArray0[2] = 'v';
      int int0 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int0);
      assertEquals(19, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(19, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(19, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = characterReader0.nextIndexOf("I7u(~+Q?m<+oaOA4lmS");
      assertEquals((-1), int1);
      assertEquals(19, characterReader0.pos());
      assertTrue(int1 == int0);
      
      charArray0[3] = 'M';
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertEquals(19, characterReader0.pos());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '=', 'v', 'M'}, charArray0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(20, characterReader0.pos());
      
      int int2 = characterReader0.nextIndexOf('3');
      assertEquals((-1), int2);
      assertEquals(20, characterReader0.pos());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean5 = characterReader0.matches("");
      assertFalse(boolean5);
      assertEquals(20, characterReader0.pos());
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      
      characterReader0.unconsume();
      assertEquals(19, characterReader0.pos());
      
      String string5 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(19, characterReader0.pos());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = characterReader0.consumeTo(' ');
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(19, characterReader0.pos());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean6 = characterReader0.matchesIgnoreCase("I7u(~+Q?m<+oaOA4lmS");
      assertFalse(boolean6);
      assertEquals(19, characterReader0.pos());
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      
      boolean boolean7 = characterReader0.isEmpty();
      assertTrue(boolean7);
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      
      String string7 = characterReader0.consumeLetterSequence();
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(19, characterReader0.pos());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = characterReader0.toString();
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(19, characterReader0.pos());
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = characterReader0.consumeHexSequence();
      assertEquals("", string9);
      assertNotNull(string9);
      assertEquals(19, characterReader0.pos());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XG:Ppz=I|M\"|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = '+';
      charArray0[4] = 'z';
      charArray0[6] = '$';
      charArray0[7] = 'w';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("XG:Pp", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsume("XG:Ppz=I|M\"|");
      assertFalse(boolean1);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("x+x/Vf-5m|*1aO|");
      assertFalse(boolean2);
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string2 = characterReader0.toString();
      assertEquals("z=I|M\"|", string2);
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = characterReader0.nextIndexOf('z');
      assertEquals(0, int0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean4);
      assertEquals(5, characterReader0.pos());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("z", string3);
      assertNotNull(string3);
      assertEquals(6, characterReader0.pos());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean5 = CharacterReader.rangeEquals(charArray0, 0, 12, "XG:Ppz=I|M\"|");
      assertFalse(boolean5);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'~', '=', '\\', '`', 'z', '\u0000', '$', 'w'}, charArray0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("rg.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean1);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean1 == boolean0);
      
      String string1 = characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(30, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = characterReader0.matches("org.jsoup.UncheckedIOException");
      assertFalse(boolean2);
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(31, characterReader0.pos());
      assertFalse(string2.equals((Object)string0));
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean3);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string3 = characterReader0.consumeLetterSequence();
      assertEquals("org", string3);
      assertNotNull(string3);
      assertEquals(3, characterReader0.pos());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = characterReader0.consumeToEnd();
      assertEquals(".jsoup.UncheckedIOException", string4);
      assertNotNull(string4);
      assertEquals(30, characterReader0.pos());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = characterReader0.consumeToEnd();
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(30, characterReader0.pos());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = characterReader0.consumeLetterSequence();
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(30, characterReader0.pos());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      char[] charArray0 = new char[0];
      characterReader0.advance();
      characterReader0.consumeToEnd();
      characterReader0.consumeToEnd();
      characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      characterReader0.matches("org.jsoup.UncheckedIOException");
      characterReader0.advance();
      characterReader0.consumeTagName();
      characterReader0.rewindToMark();
      characterReader0.pos();
      characterReader0.matchConsumeIgnoreCase("fu");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeToEnd();
      characterReader0.consumeToEnd();
      characterReader0.consumeLetterSequence();
      characterReader0.containsIgnoreCase("XG}g&3.|RG9");
      assertEquals(30, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("yO");
      characterReader0.pos();
      characterReader0.rewindToMark();
      characterReader0.consumeTo("yO");
      characterReader0.rangeEquals(0, 0, "yO");
      characterReader0.consumeTagName();
      characterReader0.advance();
      characterReader0.advance();
      characterReader0.consume();
      char[] charArray0 = new char[8];
      charArray0[0] = '\uFFFF';
      charArray0[1] = '\uFFFF';
      characterReader0.matchesAnySorted(charArray0);
      charArray0[2] = 'i';
      charArray0[3] = '#';
      charArray0[4] = 'x';
      charArray0[5] = '\uFFFF';
      charArray0[6] = '\uFFFF';
      charArray0[7] = '\uFFFF';
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeTo('o');
      characterReader0.consumeTo("_il[vFkBqB\"");
      characterReader0.consumeToEnd();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G0K[3QMfl/C!Ekk6");
      characterReader0.matchesDigit();
      characterReader0.matchesLetter();
      characterReader0.consumeTagName();
      characterReader0.consumeData();
      characterReader0.matchConsume("");
      characterReader0.rewindToMark();
      characterReader0.mark();
      characterReader0.toString();
      characterReader0.consume();
      characterReader0.nextIndexOf("/C!Ekk6");
      characterReader0.consumeDigitSequence();
      characterReader0.mark();
      characterReader0.matches('0');
      characterReader0.advance();
      characterReader0.consume();
      characterReader0.consumeTo('0');
      assertEquals(16, characterReader0.pos());
  }
}
