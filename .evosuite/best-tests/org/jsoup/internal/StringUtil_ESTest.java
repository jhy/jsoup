/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 21:54:13 GMT 2018
 */

package org.jsoup.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.internal.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.eclipse.sisu.space.ResourceEnumeration";
      boolean boolean0 = StringUtil.inSorted("org.eclipse.sisu.space.ResourceEnumeration", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace((-1810));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtil.padding(21);
      assertEquals("                     ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("", string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtil.join(stringArray0, (String) null);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtil.join((Collection) linkedList0, "m,EjwC`(~Nk");
      assertFalse(linkedList0.contains("m,EjwC`(~Nk"));
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        StringUtil.resolve((URL) null, "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.resolve((URL) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.releaseBuilder((StringBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertTrue(linkedList0.contains(2));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertTrue(linkedList0.contains(2));
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = linkedList0.offerFirst(integer0);
      assertTrue(linkedList0.contains(2));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtil.join(iterator0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction$ByteArrayUrlStreamHandler");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator) listIterator0, ",*L f?s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.join((Collection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.inSorted(";UQhzL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.in((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "                                                     ");
      assertEquals("                                                     ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("                                                     ", string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.offerLast(object0);
      assertTrue(linkedList0.contains(object0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = "";
      String string1 = StringUtil.join((Iterator) listIterator0, "");
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtil.join((Iterator) listIterator0, "java.lang.Object@0000000001");
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains(object0));
      assertEquals("", string2);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtil.resolve("!/", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string4 = "";
      String string5 = "k";
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = linkedList0.add((Object) integer0);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains(0));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      try { 
        MockURL.URL("", "k", 0, "Cn3L6DETa(a5");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst");
      assertEquals("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "   ", false);
      assertEquals("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(46);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      assertFalse(linkedList0.contains(stringBuilder0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerFirst(stringBuilder0);
      assertTrue(linkedList0.contains(stringBuilder0));
      assertTrue(boolean0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(stringBuilder0);
      assertTrue(linkedList0.contains(stringBuilder0));
      assertTrue(boolean1);
      assertEquals("", stringBuilder0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      Iterator<StringBuilder> iterator0 = linkedList0.descendingIterator();
      assertTrue(linkedList0.contains(stringBuilder0));
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtil.join(iterator0, "         ");
      assertTrue(linkedList0.contains(stringBuilder0));
      assertEquals(2, linkedList0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtil.isActuallyWhitespace(3529);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, ".class");
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      boolean boolean1 = StringUtil.isWhitespace(3529);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isBlank("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtil.normaliseWhitespace("@MY\"");
      assertEquals("@MY\"", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = StringUtil.isActuallyWhitespace(0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int1 = 1;
      boolean boolean4 = StringUtil.isActuallyWhitespace(1);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "?java.lang.Object@0000000001No such entry: 88");
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "9-ean aep4mX\"U!U^i";
      boolean boolean0 = StringUtil.inSorted("9-ean aep4mX\"U!U^i", stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "  ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean0 = StringUtil.inSorted("                   ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "                                           ";
      stringArray0[2] = ":gzX.t0:m";
      boolean boolean0 = StringUtil.in(":gzX.t0:m", stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler";
      stringArray0[1] = "          ";
      stringArray0[2] = "";
      stringArray0[3] = "j";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      stringArray0[7] = "{J<>5j>q#m6KO22.}";
      boolean boolean0 = StringUtil.in("MANIFEST", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "                                                     ");
      assertEquals("                                                     ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "                                                     ", true);
      assertEquals("                                                     ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8205);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(173);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "9-ean aep4mX\"U!U^i", true);
      assertEquals("9-ean aep4mX\"U!U^i", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("9-ean aep4mX\"U!U^i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("B4@wJ]8cMNZ5At(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("                    ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = StringUtil.padding(43);
      assertEquals("                                           ", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      String string0 = StringUtil.join((Collection) linkedList0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler";
      String string0 = StringUtil.join(stringArray0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        StringUtil.join(stringArray0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
