/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 16 21:51:19 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.eq(0);
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.select(" U");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      Elements elements1 = elements0.eq(0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Elements elements0 = new Elements(0);
      // Undeclared exception!
      try { 
        elements0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elements elements0 = new Elements(1);
      // Undeclared exception!
      try { 
        elements0.select(":5t!vxV-K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':5t!vxV-K': unexpected token at ':5t!vxV-K'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Elements elements0 = new Elements(0);
      // Undeclared exception!
      try { 
        elements0.prevAll("      ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '      ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prevAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.prev("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element[] elementArray0 = new Element[5];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prev("fa~zpto");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Elements elements0 = new Elements(1741);
      // Undeclared exception!
      try { 
        elements0.not(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.nextAll("Li\"p(MZLJY_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Li\"p(MZLJY_': unexpected token at '\"p(MZLJY_'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.nextAll("E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.nextAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.next("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.is("r&;J7*+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'r&;J7*+': unexpected token at '&;J7*+'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-3331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3331
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = new Elements((List<Element>) elements0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Elements elements0 = new Elements(55);
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Elements elements0 = new Elements(981);
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element[] elementArray0 = new Element[9];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.parents();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.parents();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.next("fI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prevAll((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elements elements0 = new Elements(9);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.is("href");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Elements elements0 = new Elements(0);
      boolean boolean0 = elements0.is("param");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.eq((-1297));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Elements elements0 = new Elements(55);
      Elements elements1 = elements0.eq(55);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.empty();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.unwrap();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.wrap("m;a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.wrap("xf?VS3ygqt_nR");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.after("SKH7Km]/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.after("Mo!{");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.before(" U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.before((String) null);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.append("\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.append("Mo!{");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Element[] elementArray0 = new Element[5];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prepend(", ]#0OZ<IR!Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elements elements0 = new Elements(25);
      Elements elements1 = elements0.prepend("Ct7]");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.html("wNR_w");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("b.=XU4\"x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.tagName((String) null);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Elements elements0 = new Elements();
      List<String> list0 = elements0.eachText();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Elements elements0 = new Elements(55);
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Element[] elementArray0 = new Element[4];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.val("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add(0, (Element) null);
      // Undeclared exception!
      try { 
        elements0.hasClass("#32U`3aP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.hasClass((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Elements elements0 = new Elements(55);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.toggleClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.toggleClass("org.jsoup.select.Evaluator$Tag");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeClass("xf?VS3ygqt_nR");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.addClass("1R^/!QB2%P1Y#");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeAttr("$RC~ Zsh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeAttr((String) null);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Element[] elementArray0 = new Element[5];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.attr("table", "table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.attr("org.jsoup.select.Evaluator$Tag", "org.jsoup.select.Evaluator$Tag");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Elements elements0 = new Elements();
      List<String> list0 = elements0.eachAttr("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.hasAttr("href");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.hasAttr("xf?VS3ygqt_nR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add(0, (Element) null);
      // Undeclared exception!
      try { 
        elements0.attr("#32U`3aP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.attr("^-RLzC`Vn");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Elements elements0 = new Elements(38);
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Elements elements0 = new Elements(1);
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Elements elements0 = new Elements(38);
      Elements elements1 = elements0.prev("E");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Elements elements0 = new Elements(1616);
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Elements elements0 = new Elements(0);
      // Undeclared exception!
      try { 
        elements0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.not("href");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Elements elements0 = new Elements(0);
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll("8z");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Elements elements0 = new Elements(25);
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.next("href");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.nextAll((String) null);
      assertNotSame(elements1, elements0);
  }
}
