<!-- https://github.com/Stvad/Software_Engineering__git/blob/master/Software_Engineering__git.json--><obj><val id="__type__">Deck</val><arr id="children"><obj><val id="__type__">Deck</val><arr id="children"></arr><val id="crowdanki_uuid">a69e2b7a-6d5b-11e6-adf3-8c705a50cbf0</val><val id="deck_config_uuid">a69e3016-6d5b-11e6-adf3-8c705a50cbf0</val><val id="desc">Please see the &lt;a href='https://ankiweb.net/shared/info/2107904924'&gt;shared deck page&lt;/a&gt; for more info.</val><val id="dyn">0</val><val id="extendNew">10</val><val id="extendRev">50</val><arr id="media_files"></arr><val id="mid">1408638528289</val><val id="name">General Information</val><arr id="notes"><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the main characteristic of a  &lt;b&gt;distributed
                  version control system
                  (DVCS)&lt;/b&gt;?</val><val>A distributed version control system has no
                  central server which
                  stores the data. Every local copy contains the full history of the
                  source code.
                  
               </val></arr><val id="flags">0</val><val id="guid">b#GLS`mD*f</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Does the use of a
                  &lt;b&gt;DVCS&lt;/b&gt; require a
                  central
                  code
                  repository?
                  
               </val><val>No.</val></arr><val id="flags">0</val><val id="guid">CPlCr{/4m(</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Where does Git
                  &lt;b&gt;commit&lt;/b&gt; file changes to?&lt;br /&gt;</val><val>To the local repository.</val></arr><val id="flags">0</val><val id="guid">O9BDWhx,@(</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What happens when you &lt;b&gt;clone&lt;/b&gt; a
                  repository with                    Git?</val><val>An exact copy of the
                  repository is created locally.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">Dkiv9+0iTX</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Does the local clone of a remote repository include the
                  complete history of the source code?</val><val>Yes.</val></arr><val id="flags">0</val><val id="guid">M,[&amp;ZR-I$S</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What's the meaning of &lt;b&gt;master branch&lt;/b&gt;?</val><val>The "master" in Git is the default branch, which generally represents the most stable code.</val></arr><val id="flags">0</val><val id="guid">bm{uO(^4b/</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a &lt;b&gt;commit&lt;/b&gt;?</val><val>A commit is a pointer to a spot&amp;nbsp;(revision)&amp;nbsp;on the code history.</val></arr><val id="flags">0</val><val id="guid">LknXA&gt;P{gu</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How are Git commits &lt;b&gt;identified&lt;/b&gt;?</val><val>Instead of numbering commits, Git uses the code contents of the commit to create a unique, 40 character SHA-1 hash.</val></arr><val id="flags">0</val><val id="guid">M!|;;-isLS</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Does a branch created in a repository,&amp;nbsp;which was cloned from another repository, need to have a&amp;nbsp;counterpart in the&amp;nbsp;remote repository?&lt;br /&gt; </val><val>No it doesn't.</val></arr><val id="flags">0</val><val id="guid">cr,S-na/4y</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which two steps are neccessary to persist modifications on a file in the repository?&lt;br /&gt;</val><val>1. Staging (mark the file to be relevant for Git) = adding the file to the index.&lt;br /&gt;2. Commiting: storing the changes in the Git repository.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">wp*ChGY&amp;nd</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does the term &lt;b&gt;staging&lt;/b&gt; describe?</val><val>Marking changes as relevant for the version control, by adding them to the index.</val></arr><val id="flags">0</val><val id="guid">s2b*|BtuO2</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a &lt;b&gt;Revision&lt;/b&gt;?&lt;br /&gt;</val><val>A revision represents a version of the source code. Git identifies
                                               revisions
                                               with SHA-1 IDs using a commit object. SHA-1 IDs are 160 bits long and are
                                               represented
                                               in
                                               hexadecimal. The latest version can be addressed
                                               via
                                               HEAD, the version before that via
                                               HEAD~1
                                               and so on.</val></arr><val id="flags">0</val><val id="guid">DF$yg5cnTs</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>In which file does Git store &lt;b&gt;global settings&lt;/b&gt;?&lt;br /&gt;</val><val>In the &lt;b&gt;.gitconfig&lt;/b&gt; file.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">cq9}90`8%l</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which file tells Git which files and directories to &lt;b&gt;ignore&lt;/b&gt;?&lt;br /&gt;</val><val>&lt;pre&gt;.gitignore&lt;/pre&gt;</val></arr><val id="flags">0</val><val id="guid">p{@pLqf8~)</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the difference between &lt;b&gt;local .gitignore&lt;/b&gt; and &lt;b&gt;global .gitignore&lt;/b&gt; files, regarding visibility?&lt;br /&gt;</val><val>The local
               .gitignore
               file can be committed into the Git repository and
               therefore is visible
               to everyone who clones the repository. The
               global
               .gitignore
               file is only
               locally visible.
               
            </val></arr><val id="flags">0</val><val id="guid">bALcFrS[,0</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How are &lt;b&gt;empty directories&lt;/b&gt; handled under Git version control / by common practice?</val><val>Git ignores empty directories, i.e. it does not put them under version control. Common practice for tracking an empty directory though, is to put a file called &lt;b&gt;.gitkeep&lt;/b&gt; into such a directory.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">julVRci`rj</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does the command &lt;b&gt;git reflog&lt;/b&gt;&amp;nbsp;do?&lt;br /&gt;</val><val>It displays the history of the complete changes of the current branch, based on the HEAD revision.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">s$go8!a4M`</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Does &lt;b&gt;git reflog&lt;/b&gt;&amp;nbsp;also contain deleted commits?</val><val>Yes.</val></arr><val id="flags">0</val><val id="guid">o7*md3rMpY</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How is the &lt;b&gt;default branch&lt;/b&gt; called in Git?&lt;br /&gt;</val><val>Master.</val></arr><val id="flags">0</val><val id="guid">KQ=K|X^!V@</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does the term &lt;b&gt;merging&lt;/b&gt;&amp;nbsp;describe?&lt;br /&gt;</val><val>The process of combining changes of two branches.</val></arr><val id="flags">0</val><val id="guid">IMAr1$Qa%~</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a &lt;b&gt;merge conflict&lt;/b&gt;?&lt;br /&gt;</val><val>A merge conflict occurs, if two people have modified the same content and Git cannot automatically determine how both changes should be applied.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">u}r83:+:~S</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does the &lt;b&gt;rebase&lt;/b&gt;&amp;nbsp;command do?&lt;br&gt;</val><val>In general terms - rewrites history. E.g: Combining several commits into&lt;br&gt;                  one commit. Or replaying changes from one branch on top of the other.</val></arr><val id="flags">0</val><val id="guid">ioQ[YMk002</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What functionality does the &lt;b&gt;stash&lt;/b&gt; command add?&lt;br /&gt;</val><val>Saving the current uncommmitted changes and&amp;nbsp;checkout&amp;nbsp;the last committed revision. This allows pulling-in the latest changes or to develop an urgent fix. Afterwards the stashed changes can be restored, which will reapply the changes to the current version of the source code.&lt;br /&gt; </val></arr><val id="flags">0</val><val id="guid">i`-!UI5`9n</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What's the rule of thumb, concerning the &lt;b&gt;stash&lt;/b&gt;&amp;nbsp;command?&lt;br /&gt;</val><val>It should be the exception to using Git. Typically you would create new branches for new features and switch between branches.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">My4;,HZvH:</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a &lt;b&gt;patch file&lt;/b&gt;?&lt;br /&gt;</val><val>A text file that contains changes to the source code.</val></arr><val id="flags">0</val><val id="guid">m5arfU*|ZX</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is an &lt;b&gt;alias&lt;/b&gt; in Git?</val><val>An alias in Git allows you to setup your own Git command. E.g. you can define an alias which is a short form of your own favorite commands or you can combine several commands with an alias.</val></arr><val id="flags">0</val><val id="guid">PE`j{-UNE?</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Name two &lt;b&gt;transport types&lt;/b&gt;&amp;nbsp;that are supported protocols for Git checkouts</val><val>The native Git protocol is &lt;b&gt;git&lt;/b&gt;, alternatively the &lt;b&gt;http&lt;/b&gt; protocol is also supported.</val></arr><val id="flags">0</val><val id="guid">BKdJz&lt;y,i?</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What happens in regards to naming of the original repository, when &lt;b&gt;cloning&lt;/b&gt; a remote repository?&lt;br /&gt;</val><val>The original repository will automatically be called "origin".&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">xDNKnks;P;</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the possibility of using the &lt;b&gt;HTTP protocol&lt;/b&gt; with Git especially helpful for?</val><val>If a firewall blocks all requests other than http.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">ykx4hD1f`?</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which are the two variants of &lt;b&gt;ssh keys&lt;/b&gt;?&lt;br /&gt;</val><val>Public and private.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">K5v/_?3y;F</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does &lt;b&gt;rev~&lt;/b&gt; stand for?</val><val>The first parent of a revision "rev"</val></arr><val id="flags">0</val><val id="guid">NvGA`?8=%</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the starting point of the scope of &lt;b&gt;.gitignore&lt;/b&gt; files?</val><val>They define ignore definitions for the whole directory tree, starting from the point where the .gitignore file itself resides.</val></arr><val id="flags">0</val><val id="guid">op.FKBEm&lt;w</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What's the difference between &lt;b&gt;git pull&lt;/b&gt; and &lt;b&gt;git fetch&lt;/b&gt;? (&lt;span style=" font-style: normal; font-weight: normal;"&gt;In the simplest terms)&lt;/span&gt;</val><val>git pull does a git fetch followed by a git merge.</val></arr><val id="flags">0</val><val id="guid">j@2Mww$9I{</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the difference between &lt;b&gt;git commit&lt;/b&gt; and &lt;b&gt;git push&lt;/b&gt;?</val><val>&lt;b&gt;commit:&lt;/b&gt; adding changes to the repository.&lt;div&gt;&lt;b&gt;push&lt;/b&gt;: to transfer the last commit(s) to a remote server&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">n/=o]SCdPT</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the &lt;b&gt;head&lt;/b&gt; in Git?</val><val>The head is a pointer to the current branch, which is in turn the last commit you made or checked out into your working directory.</val></arr><val id="flags">0</val><val id="guid">Dgx!t</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the &lt;b&gt;index&lt;/b&gt; in Git?</val><val>It's a snapshot of changes contained in your next commit, this way it's the "&lt;b&gt;proposed next commit&lt;/b&gt;".</val></arr><val id="flags">0</val><val id="guid">KRd1.</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does &lt;b&gt;head^&lt;/b&gt; mean?</val><val>It means the first parent of the tip of the current branch.</val></arr><val id="flags">0</val><val id="guid">gTh:E.xGT7</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the difference between &lt;b&gt;head~&lt;/b&gt; and &lt;b&gt;head^&lt;/b&gt; ?</val><val>&amp;nbsp;~&amp;lt;n&amp;gt; means the revision that is the &amp;lt;n&amp;gt;th generation ancestor of the named revision, following only the first parents.&lt;div&gt;^&amp;lt;n&amp;gt; means the &amp;lt;n&amp;gt;th parent of that revision.&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">oSbQ@6YX3O</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a local version control system?</val><val>A database of changes kept on the same computer as the files being versioned.</val></arr><val id="flags">0</val><val id="guid">lyLiO</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How is a distributed version control system different from others?</val><val>Every client has a full backup of all the data.</val></arr><val id="flags">0</val><val id="guid">vL&gt;PF</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the "snapshot" concept?</val><val>In Git, the data is more like a stream of complete snapshots of a mini filesystem rather than a list of file changes like you'll see in SVN, Perforce, etc.</val></arr><val id="flags">0</val><val id="guid">[=E+4</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Why are most git operations so fast?&lt;br&gt;</val><val>They happen on the local disk, rather than over a network&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">nWWq:b)^~N</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How does git maintain file integrity?&lt;br&gt;</val><val>Everything is SHA-1 checksummed and stored not by filename, but rather hash value of each file's contents.&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">j-w#1jS:X.</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are the 3 git states your files can reside in?&lt;br&gt;</val><val>committed, modified, and staged&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">C4^;Av:G|V</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does it mean when a file is in the "committed" state?&lt;br&gt;</val><val>The data is safely stored in your local database&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">d1B#YWuY@B</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does it mean if a file is in the "modified" state?&lt;br&gt;</val><val>You have changed the file, but not yet committed it.&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">B*=9usvjro</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does it mean if a file is in the "staged" state?&lt;br&gt;</val><val>You have marked a file in its current state to go into the next commit snapshot.&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">fZB+bI=,I[</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are the 3 sections of a git project?&lt;br /&gt;</val><val>the Git directory (repository), the working directory, and the staging area&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">exQD~)OGAp</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is stored in the Git directory?&lt;br&gt;</val><val>The metadata and object database for your project&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">tE7lTjYc[[</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is copied when you clone a repository from another computer?&lt;br&gt;</val><val>the Git directory&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">k,m+XqcVpU</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the working directory?&lt;br&gt;</val><val>A single checkout of one version of the project. These files are pulled out of the compressed database in the git directory and placed on disk for you to use and modify.&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">K.$%A~oaD9</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the staging area?</val><val>It is a file in the git directory that stores information about what goes into the next commit. It is sometimes referred to as the "index".</val></arr><val id="flags">0</val><val id="guid">L41A}A*]ro</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the 3-step basic git workflow?</val><val>1. modify files in working directory&lt;div&gt;2. stage files, adding snapshots of them to the staging area&lt;/div&gt;&lt;div&gt;3. commit, which takes the files in the staging area and stores that snapshot permanently to your git directory&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">F*ctH#)=J&amp;</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Where are the three places that git config variables can be stored?</val><val>1. systemwide: &amp;nbsp;/etc/gitconfig&lt;div&gt;2. per user: ~/.gitconfig or ~/.config/git/config&lt;/div&gt;&lt;div&gt;3. per project: .git/config&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">u(@cQ&lt;B8CM</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What option do you pass to git config to modify system-level configs?</val><val>--system</val></arr><val id="flags">0</val><val id="guid">i})V+Dzh9J</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What option do you pass to git config to make changes for specific to your user?</val><val>--global</val></arr><val id="flags">0</val><val id="guid">BarEPJKq84</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are three ways to get help on a git verb?</val><val>1. git help &amp;lt;verb&amp;gt;&lt;div&gt;2. git &amp;lt;verb&amp;gt; --help&lt;/div&gt;&lt;div&gt;3. man git-&amp;lt;verb&amp;gt;&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">O`8m5XL4n_</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you get a copy of an existing git repository, say https://github.com/libgit2/libgit2&lt;span style="line-height: 1.1;"&gt;?&lt;/span&gt;&lt;br&gt;</val><val>git clone&amp;nbsp;https://github.com/libgit2/libgit2</val></arr><val id="flags">0</val><val id="guid">o=}nL8EYm$</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are a couple different transfer protocols used by git?</val><val>https://&lt;div&gt;git://&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">A}1)?]T`vM</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the difference between a tracked and untracked file?</val><val>Tracked files are all files that were in the last snapshot. They can be unmodified, modified, or staged. Untracked files are not in the latest snapshot or staged.</val></arr><val id="flags">0</val><val id="guid">Q`hDEs1([I</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Why is it possible for a tracked file to be both in staging and modified state?</val><val>Because the staged version is the contents of the file at the exact time you ran "git add" to stage the file. You have to run "git add" again if you've modified it and want to stage the latest contents of the file.</val></arr><val id="flags">0</val><val id="guid">Ft&amp;|}kHYmQ</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What file is used to ignore some untracked files?</val><val>.gitignore</val></arr><val id="flags">0</val><val id="guid">A(Pz~1U7&lt;!</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the default shortname for cloned repositories?</val><val>origin</val></arr><val id="flags">0</val><val id="guid">t;V;(s*,@A</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How does git fetch affect your local repository?</val><val>It pulls the data, but does not merge or modify your working copy. To actually merge, it must be manually done.</val></arr><val id="flags">0</val><val id="guid">Pj#|SXYy$f</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is stored in a git commit object?</val><val>* pointer to the snapshot of the staged content&lt;div&gt;* author's name and email&lt;/div&gt;&lt;div&gt;* commit message&lt;/div&gt;&lt;div&gt;* pointer to the commit(s) directly before this one&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">s]So&gt;&lt;?rVW</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a branch in terms of git commit objects?</val><val>A lightweight movable pointer to one of the commits</val></arr><val id="flags">0</val><val id="guid">B0mlW%vB3_</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the name of the special pointer which tells you which local branch you're currently on?</val><val>HEAD</val></arr><val id="flags">0</val><val id="guid">wx&gt;?/9M3;E</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What happens to the HEAD pointer when you create a new branch?</val><val>Nothing, it continues to point to the existing branch (such as master, if you haven't changed it yet). It does not switch to the new branch automatically.</val></arr><val id="flags">0</val><val id="guid">rSIJ1yGYe</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What happens to the working directory when you switch branches?</val><val>The files are updated to reflect the last commit of the branch. If it cannot be updated cleanly, git will not let you switch.</val></arr><val id="flags">0</val><val id="guid">uZYKi_w!c;</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Why is a git branch cheap?</val><val>A branch is a simple file that contains the 40 character SHA-1 checksum of the commit it points to.</val></arr><val id="flags">0</val><val id="guid">i}td:;X-$8</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a "fast-forward" merge?</val><val>When you try to merge a commit that can be reached by following the first commit's history, git will simply move the pointer forward because there is no divergent work to merge together. This is known as a "fast-forward" merge.</val></arr><val id="flags">0</val><val id="guid">rVbh7YpG/J</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a merge commit?</val><val>When two divergent branches are merged, git creates a new snapshot and a new commit that points to it. A merge commit has more than one parent.</val></arr><val id="flags">0</val><val id="guid">I_KQ5^#C&amp;9</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How is git different in dealing with the merge base when merging branches?</val><val>Git determines the best common ancestor to use for its merge base, which is a lot simpler than many other VCSes.</val></arr><val id="flags">0</val><val id="guid">tgr3Vb|&lt;^/</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does the leading * character mean in the output of git branch?</val><val>It indicates the branch you have currently checked out (that HEAD points to).</val></arr><val id="flags">0</val><val id="guid">B@=#&amp;gvD8$</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the name used for a branching workflow where sets of commits graduate to a more stable silo when they're fully tested?&lt;br&gt;</val><val>progressive-stability branching&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">z/@Lr]Q(#S</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the name for a short-lived branch for a single particular feature or related work?&lt;br&gt;</val><val>topic branch&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">i!X._o?lw1</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are remote branches?&lt;br&gt;</val><val>Pointers to the state of branches in remote repositories. They are local branches that you cannot move.&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">G#8JF}nb2h</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>When are remote branch pointers updated?&lt;br&gt;</val><val>They are automatically moved when you do any network communication.&lt;br&gt;</val></arr><val id="flags">0</val><val id="guid">J6*@RPtUh1</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>When you fetch a remote branch, will it automatically set up a local branch with the same name?</val><val>No. You must either merge it or create your own branch from it.</val></arr><val id="flags">0</val><val id="guid">Q5})51ApH+</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the shorthand for referencing the tracking remote and branch?</val><val>@{u} or @{upstream}</val></arr><val id="flags">0</val><val id="guid">tK3qT-!z5k</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How does rebasing affect the commit history differently than a merge?</val><val>A rebase will make the commit history look linear/clean rather than a bunch of branch merges. This is often done to make sure your commits apply cleanly to a remote branch.</val></arr><val id="flags">0</val><val id="guid">zcp*jH9a&amp;8</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What one tip should you follow to avoid a drawback of rebasing?</val><val>Do not rebase commits that exist outside of your repository.</val></arr><val id="flags">0</val><val id="guid">ATWa!RS=Z&amp;</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a good general rule for deciding when to rebase or to merge?</val><val>Rebase local changes you haven't shared yet in order to clean up, but never rebase anything you pushed somewhere.</val></arr><val id="flags">0</val><val id="guid">xN+rNGwU1e</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is a "bare repository"?</val><val>A repository that doesn't contain a working directory</val></arr><val id="flags">0</val><val id="guid">uN=LqKN.,h</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj></arr></obj><obj><val id="__type__">Deck</val><arr id="children"></arr><val id="crowdanki_uuid">a6a24430-6d5b-11e6-adf3-8c705a50cbf0</val><val id="deck_config_uuid">a69dd698-6d5b-11e6-adf3-8c705a50cbf0</val><val id="desc">Please see the &lt;a href='https://ankiweb.net/shared/info/'&gt;shared deck page&lt;/a&gt; for more info.</val><val id="dyn">0</val><val id="extendNew">1</val><val id="extendRev">50</val><arr id="media_files"></arr><val id="mid">1467568254113</val><val id="name">Commands</val><arr id="notes"><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will &lt;b&gt;initialize a new, empty repository&lt;/b&gt; in the current working directory?</val><val>&lt;pre&gt;git init&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">vd&lt;-:IY:nA</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What command is used to configure the local user's email ("email"), that are used when committing to Git repositories?</val><val>&lt;pre&gt;&lt;span style="font-family: Arial"&gt;git config --global user.email "email"&lt;/span&gt;&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Oy*&gt;$5ZF=,</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does this command do:&amp;nbsp;&lt;b&gt;git add . &amp;nbsp;&lt;/b&gt;</val><val>It adds everything inside the current working directory to the index.</val></arr><val id="flags">0</val><val id="guid">bFER[=-&lt;|E</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which commands are needed to &lt;b&gt;add&lt;/b&gt; &lt;b&gt;all .js files &lt;/b&gt;to the local Git repository?</val><val>&lt;pre&gt;git add *.js&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">ybvT&lt;[dy(K</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will &lt;b&gt;commit&lt;/b&gt; to the local repository, including a &lt;b&gt;commit message &lt;/b&gt;("message")?</val><val>&lt;pre&gt;git commit -m "message"&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">db&amp;Hk]Np30</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command prints&amp;nbsp;&amp;nbsp;the &lt;b&gt;current state&lt;/b&gt; of your code/repository?</val><val>&lt;pre style="text-align: justify;"&gt;git status&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">yl]3.#F=wd</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which Git command is used to &lt;b&gt;list the existing branches&lt;/b&gt;?</val><val>&lt;pre&gt;git branch&lt;/pre&gt;</val><val></val><val>Ommitting all options to the "git branch" command, will list the existing branches.</val></arr><val id="flags">0</val><val id="guid">xx=?AKe[yR</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command &lt;b&gt;creates&lt;/b&gt; a new branch ("branchname")?</val><val>&lt;pre&gt;git branch branchname&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">P~gJ-(ZRpb</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will switch to the branch "myotherbranch"?</val><val>&lt;pre style="line-height: 25px;"&gt;git checkout myotherbranch&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">A;K+h*%{g+</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What commands will join everything from the branch "bigIdea" to be part of the "master" branch?</val><val>&lt;pre&gt;git checkout master&lt;/pre&gt;
&lt;pre&gt;git merge bigIdea&lt;/pre&gt;</val></arr><val id="flags">0</val><val id="guid">xj?aKvn]u;</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will delete (even) an unmerged branch ("branchname")?</val><val>git branch -D branchname</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">cy@|.4O)Rb</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays the existing &lt;b&gt;global Git settings&lt;/b&gt;?&lt;br /&gt;</val><val>&lt;pre&gt;git config --list&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">gCNrkn8&gt;}D</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command shows&lt;b&gt; commit logs &lt;/b&gt;(list of all commits, starting with newest)?&lt;br /&gt;</val><val>&lt;pre&gt;git log&lt;/pre&gt;</val><val>&lt;div&gt;For each commit the following info would be displayed&lt;/div&gt;1. SHA-1 identifier&lt;br /&gt;2. Author and Email&lt;br /&gt;3. Date + time of the commit&lt;br /&gt;4. Commit message header</val><val></val></arr><val id="flags">0</val><val id="guid">F.SR4G,Gfi</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays all &lt;b&gt;changes to tracked files since the last commit&lt;/b&gt;?&lt;br /&gt;</val><val>&lt;pre&gt;git diff&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">gz&gt;^p#~9is</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays the changes in a &lt;b&gt;specific commit &lt;/b&gt;("commitid")?</val><val>&lt;pre&gt;git show commitid&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Km&lt;`;Sy=)R</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays the &lt;b&gt;change history&lt;/b&gt; of a specific file ("filename")?</val><val>&lt;pre&gt;git log filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">c|}&amp;67Vq&lt;k</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays which commit and author modified a file ("filename") on a line by line basis?</val><val>&lt;pre&gt;git blame filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">zhQu]56^%W</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command deletes a file ("filename")&amp;nbsp;from the working directory and at the same time marks it for the next commit?&lt;br /&gt;</val><val>&lt;pre&gt;git rm filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">jPCDaOPH-e</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays the existing defined &lt;b&gt;remote repositories&lt;/b&gt;?&lt;br /&gt;</val><val>&lt;pre&gt;git remote&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">BW0mPtV2np</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command &lt;b&gt;cleans&lt;/b&gt;&amp;nbsp;untracked changes in the working directory?</val><val>&lt;pre&gt;git clean -f&lt;/pre&gt;</val><val>optional:&lt;div&gt;-d to remove untracked directories&lt;/div&gt;&lt;div&gt;-x remove also "ignored files"&lt;/div&gt;</val><val></val></arr><val id="flags">0</val><val id="guid">tLncJ/l5g8</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How can you &lt;b&gt;revert a deleted or changed file &lt;/b&gt;("filename")&lt;b&gt; that has not yet been added to the index&lt;/b&gt;?&lt;br /&gt;</val><val>git checkout filename</val><val>Add -- after checkout to avoid naming conflicts if you have tag or branch with the same name</val><val></val></arr><val id="flags">0</val><val id="guid">fB~P#a9Rr9</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How can you checkout older revisions of your source code (revision "commitid")?&lt;br /&gt;</val><val>git checkout commitid</val><val>Via checking out specific commit id</val><val></val></arr><val id="flags">0</val><val id="guid">mO83Khi,Bp</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command removes an added file ("filename") from the index again?&lt;br /&gt;</val><val>&lt;pre&gt;git reset filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">r9_$:6`{&amp;]</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How can all changes of a commit ("commitid") be reverted and a new commit be recorded, which documents that the other commit was reverted?&lt;br /&gt;</val><val>&lt;pre&gt;git revert commitid&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">IkdEc`A5@C</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command lists the &lt;b&gt;available tags&lt;/b&gt;?&lt;br /&gt;</val><val>&lt;pre&gt;git tag&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">C%6YFoMT|@</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command creates a &lt;b&gt;new tag &lt;/b&gt;("tagname") &lt;b&gt;with a description&amp;nbsp;&lt;/b&gt;(description)?</val><val>&lt;pre&gt;git tag tagname -m 'description'&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">QXr(!z{!JN</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will &lt;b&gt;check out a specific tag &lt;/b&gt;("tagname")?</val><val>&lt;pre&gt;git checkout tagname&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">px*W&lt;u78A!</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command / parameter &lt;b&gt;lists all branches, including remote&lt;/b&gt; branches?</val><val>&lt;pre&gt;git branch -a&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Lh{-~`~T,3</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command &lt;b&gt;creates a new branch &lt;/b&gt;(branchname)&lt;b&gt; and switches to it&lt;/b&gt;?</val><val>git checkout -b branchname</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">M|AX8qt~&gt;O</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command would &lt;b&gt;delete &lt;/b&gt;the local "testing" branch (if it is merged)?&lt;br /&gt;</val><val>&lt;pre&gt;git branch -d testing&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">E$0ONs0VO;</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command &lt;b&gt;merges differences&lt;/b&gt; of the "testing" branch into the current active branch?&lt;br /&gt;</val><val>&lt;pre&gt;git merge testing&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">BX2UBkW5(_</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which default Git tool exists for &lt;b&gt;resolving conflicts&lt;/b&gt;, which command starts it?&lt;br /&gt;</val><val>git mergetool</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">wV]w?R&gt;lcp</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command would &lt;b&gt;start interactive rebase &lt;/b&gt;of the last seven commits?</val><val>&lt;pre&gt;git rebase -i HEAD~7&lt;/pre&gt;</val><val></val><val>More info on interactive mode here:&amp;nbsp;&lt;a href="https://git-scm.com/docs/git-rebase"&gt;https://git-scm.com/docs/git-rebase&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">rYX3zdLiLv</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command displays &lt;b&gt;which commit deleted a specific file &lt;/b&gt;("filename")?&lt;br /&gt;</val><val>&lt;pre&gt;git log -- filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">qT8-CD&gt;aCh</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the &lt;b&gt;--&lt;/b&gt; option in &lt;b&gt;git log&lt;/b&gt;&amp;nbsp;used for?&lt;br /&gt;</val><val>To see the commit history for a file, even if the file has been deleted.&lt;br /&gt;</val></arr><val id="flags">0</val><val id="guid">en&gt;uh_WPEG</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will define an alias "add-commit", which&lt;br /&gt;                  combines&lt;br /&gt; &lt;b&gt;git add . -A&lt;/b&gt;&lt;br /&gt;                  and&lt;br /&gt; &lt;b&gt;git commit&lt;/b&gt;?</val><val>&lt;pre class="programlisting"&gt;git config --global alias.add-commit &lt;span class="hl-string"&gt;'!git add . -A &amp;amp;&amp;amp; git commit'&lt;/span&gt;&lt;/pre&gt;</val><val>! is to specify that it's an external command</val><val></val></arr><val id="flags">0</val><val id="guid">v4!4YvMOyH</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does the command do: &lt;b&gt;git reset --soft HEAD~&lt;/b&gt;</val><val>Undo the last commit. The affected files will be back on stage again.</val></arr><val id="flags">0</val><val id="guid">Bb9(y,?O!N</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What does &lt;b&gt;git reset --hard HEAD~&lt;/b&gt;&amp;nbsp;do? (instead of HEAD~ it could be also a commit SHA-1 or another reference)</val><val>Undo the last commit, unstage files AND undo any changes in the working directory. (Not tracked files won't be affected)</val></arr><val id="flags">0</val><val id="guid">e?#@Ae7yYi</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which parameter allows you to &lt;b&gt;stage an ignored file&lt;/b&gt;?</val><val>&lt;pre&gt;--force&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">t#C`2kFJh%</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which Git command &lt;b&gt;newly stages a specific file &lt;/b&gt;("filename")?</val><val>&lt;pre&gt;git add filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">F9hBmh|l1!</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will &lt;b&gt;undo the checking-in of an unwanted change &lt;/b&gt;in a file "filename"&amp;nbsp;(remove the respective file from the index), but keep the changes in the filesystem?</val><val>&lt;pre&gt;git reset filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">K&amp;{Me3,SpN</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What is the difference between:&lt;br&gt;&lt;pre&gt;git checkout -f&lt;/pre&gt; and &lt;pre&gt;git reset --hard HEAD&lt;/pre&gt;?</val><val>None, with these parameters they do exactly the same.</val></arr><val id="flags">0</val><val id="guid">v*,Ks</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Remove main.txt from staging but keep in working (untrack file, after this and commit file would be remove from repo)</val><val>git rm --cached main.txt</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Q+7&amp;uzQT|w</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command / parameter changes the message of the last commit? (for "newmessage")&lt;br /&gt;</val><val>&lt;code&gt;git commit --amend -m "newmessage"&lt;/code&gt;&lt;br /&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">PI~KTfs,vb</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Clone an existing repository (address: "url")</val><val>git clone url</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">G82n[7RC-w</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Create a new local repository</val><val>git init</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">q@#s*s3u]g</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Add some (allows you interactively to choose which) changes in &lt;i&gt;file&lt;/i&gt; to the next commit</val><val>git add -p &lt;i&gt;file&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">PMP7kE]98_</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Commit all local changes in tracked files</val><val>git commit -a</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">u.R(/o`lN5</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Commit previously staged changes</val><val>git commit</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">CD?#JCMZQT</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Change the last commit [only before pushing]</val><val>git commit --amend</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">AuqfF!TJF|</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show changes over time (diffs) for a specific file ("filename")</val><val>git log -p &lt;i&gt;filename&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">LXatc~.8(T</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Switch HEAD to &lt;i&gt;branch&lt;/i&gt;</val><val>git checkout&lt;i&gt;&amp;nbsp;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">oQvc(-wSfJ</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Create a new branch (name "nbranch") based on current HEAD</val><val>git branch n&lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">D@AO#)N}^n</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Create a new tracking branch ("tbranch") based on a remote branch ("rbranch")</val><val>git branch --track t&lt;i&gt;branch&lt;/i&gt; &lt;i&gt;rbranch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">iSDwh!LidQ</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Delete a local branch ("branch")</val><val>git branch -d &lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">kFL]Z[c?WW</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Mark the current commit with a tag ("tagname")</val><val>git tag &lt;i&gt;tagname&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">s!ZB.hS(-G</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show information about a remote&amp;nbsp;("origin")</val><val>git remote show &lt;i&gt;origin&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">tF=*UV)5N=</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Add remote server 'url' with shortname 'myurl'</val><val>git remote add myurl url</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">HoFoQWIJch</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Download all changes from &lt;i&gt;remote&amp;nbsp;&lt;/i&gt;("origin")&amp;nbsp;but don't integrate into HEAD</val><val>git fetch &lt;i&gt;origin&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">fANXqT[p/F</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Download changes from remote&amp;nbsp;("origin")&amp;nbsp;branch "branch" and directly merge into HEAD</val><val>git pull &lt;i&gt;origin&lt;/i&gt; &lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">u82$&amp;koLO+</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Publish local changes (for a branch "branch") on a remote ("origin")</val><val>git push &lt;i&gt;origin&lt;/i&gt;&amp;nbsp;&lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Ln4&amp;)EH3[6</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Delete a "branch" on the remote&amp;nbsp;("origin") (old way)</val><val>git push &lt;i&gt;origin&lt;/i&gt;&amp;nbsp;:&lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">b:dG)*p%)g</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Publish your tags</val><val>git push --tags</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">lapc;rQKP$</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Merge &lt;i&gt;branch&lt;/i&gt; into your current HEAD</val><val>git merge &lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">AKq80IBb}P</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Rebase your current HEAD onto &lt;i&gt;branch&lt;/i&gt;</val><val>git rebase &lt;i&gt;branch&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">J&lt;:a=e?`oZ</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Abort a rebase</val><val>git rebase --abort</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Q8k(Cko^;c</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Continue a rebase after resolving conflicts</val><val>git rebase --continue</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">P}-RgapC#;</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Use your configured merge tool to solve conflicts</val><val>git mergetool</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">ktUT0Y8n@/</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Use your editor to manually solve conflicts during merge/rebase and after resolving mark file as resolved with:</val><val>git add &lt;i&gt;resolved-file or&lt;/i&gt;&lt;div&gt;git rm &lt;i&gt;resolved-file&lt;/i&gt;&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">x:&amp;=qX&lt;?g[</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>uncertain</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Discard all local changes in working directory</val><val>git reset --hard HEAD</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">z4bjQlX^a)</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Discard local changes in a specific file ("filename")</val><val>git checkout&amp;nbsp;&lt;i&gt;filename&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">AiXZD7qnCt</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Reset your HEAD pointer to some previous &lt;i&gt;commit&lt;/i&gt; (and discard all changes since then)</val><val>git reset --hard &lt;i&gt;commit&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">i[4p_Cw|hU</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Reset your HEAD pointer to some previous commit, and preserve all changes as unstaged changes</val><val>git reset &lt;i&gt;commit&lt;/i&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">f.*![R]E|?</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Reset your HEAD pointer to some previous commit ("commit") and preserve uncommited local changes</val><val>git reset --keep &lt;i&gt;commit&lt;/i&gt;</val><val>If a file that is different between &amp;lt;commit&amp;gt; and HEAD has local changes, reset is aborted.</val><val></val></arr><val id="flags">0</val><val id="guid">R|LmdnJ,y</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What tool is used to get and set configuration variables that control how git looks and operates?</val><val>git config</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">fxZQIT(,(b</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What .gitignore pattern would you use to ignore all .txt files in the doc folder?</val><val>doc/**/*.txt</val><val></val><val>&lt;a href="https://git-scm.com/docs/gitignore"&gt;https://git-scm.com/docs/gitignore&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">EADNWO/y%=</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How can you skip the staging area for modified, tracked files when doing a commit?</val><val>git commit -a</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">v].?TQ-:3w</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you delete a &lt;i&gt;file&lt;/i&gt; that has been modified and already added to the staging area?</val><val>git rm -f file</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">t-q}2tG:=X</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you rename or move a file in git ("src" to "target")?</val><val>git mv src target</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">hwwyi_%Pd8</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are some of the options to view the commit log history in different formats?</val><val>--pretty=[oneline | short | full | fuller]&lt;div&gt;--pretty=format:"..."&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">mqXLAB~pFz</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you view the history for author jdoe with keyword potato in the commit message made in the last two weeks that added or removed a reference to the function mashThePotato that were not merges?</val><val>git log --author jdoe --grep potato --all-match -SmashThePotato --since=2.weeks --no-merges</val></arr><val id="flags">0</val><val id="guid">eh}B.z/n^;</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Why is git reset considered safe without "--hard" option?</val><val>It only affects your staging area</val></arr><val id="flags">0</val><val id="guid">JC%^;+L+{p</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you tag revision 0123abc with the name v1.0?</val><val>git tag v1.0 0123abc</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">wi-I)r_kC{</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What happens if you try to delete a branch with "git branch -d &amp;lt;name&amp;gt;" that has not yet been merged?</val><val>It will fail, and offer -D if you really want to lose your branch.</val></arr><val id="flags">0</val><val id="guid">u)(3&gt;G(PkD</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>If you want to use a different name than "origin" (eg "norig") for the remote when cloning a repository ("repo"), what parameter would you use?&lt;br /&gt;</val><val>git clone -o norig repo&lt;br /&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">ce?E649%xX</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How would you share a local branch called "badname" as "goodname" on a remote called "origin"?&lt;br&gt;</val><val>git push origin badname:goodname&lt;br&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">K7n]nn1&amp;|k</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How would you set up a credential cache so that you don't have to keep typing your password for git push?</val><val>git config --global credential.helper cache</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">p2[Clw3O~&lt;</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>If you have a local branch and you want it to use a remote branch (say origin/hotfix) as upstream, how would you set it?</val><val>git branch -u origin/hotfix</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">m8|o{YV!nU</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you see what tracking branches you have set up?</val><val>git branch -vv</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">LRM3~SSVl%</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How would you delete a remote branch ("serverfix") from the server ("origin")?</val><val>git push origin --delete serverfix</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Igy_c!s=?[</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How would you use rebase to apply master changes to branch b1, then apply b1 changes to master? The result being a linear history.</val><val>&lt;div&gt;# method: 1&lt;/div&gt;git checkout b1&lt;div&gt;git rebase master&lt;/div&gt;&lt;div&gt;git checkout master&lt;/div&gt;&lt;div&gt;git merge b1&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;# method: 2&lt;/div&gt;&lt;div&gt;git rebase b1 master&lt;/div&gt;&lt;div&gt;git checkout master&lt;/div&gt;&lt;div&gt;git merge b1&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">BU,]d;k1vy</val><val id="note_model_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>If you have changes on commits that no longer exist upstream (due to a remote rebase), how can you pull in those changes and avoid conflicts that would happen with git pull origin/master?</val><val>&lt;div&gt;git pull --rebase origin/master&lt;/div&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">r&amp;Du}9yV]&gt;</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What are limitations of the command that changes the message of the last commit (&lt;span style="font-family: monospace"&gt;git commit --amend&lt;/span&gt;)?</val><val>It only works before the commit has been pushed to remote repo.</val></arr><val id="flags">0</val><val id="guid">p}K},k:N*K</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What command is used to configure the local user's name ("Name"), that are used when committing to Git repositories?</val><val>&lt;pre&gt;git config --global user.name "Name"&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">tc$Es;:D1%</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show what file would be delited with "git clean" (dry run)</val><val>git clean -n</val><val>(or --dry-run)</val><val></val></arr><val id="flags">0</val><val id="guid">e%&gt;lbo,!2:</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What option should you add to "git clean" in order to remove untracked directories</val><val>-d</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Q`Z}4EnZK~</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What option should you add to "git clean" in order to remove "ignored" files</val><val>-x</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">dk~4Dx5y5N</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Which command will&amp;nbsp;&lt;b&gt;show the entire history (&lt;/b&gt;including renames&lt;b&gt;)&amp;nbsp;&lt;/b&gt;for the file ("filename")?</val><val>&lt;pre&gt;git log --follow -p filename&lt;/pre&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">k`%2n:=CjO</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>&lt;b&gt;Create a stash&lt;/b&gt;&amp;nbsp;with uncommitted changes (analogous to save uncommited changes, and do reset hard)</val><val>git stash</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">ez-t2N[Xx1</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val><val>stash</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>&lt;b&gt;Reapply the stashed changes&lt;/b&gt;&amp;nbsp;&lt;b&gt;and&lt;/b&gt;&amp;nbsp;&lt;b&gt;delete the stash&amp;nbsp;&lt;/b&gt;from the list of stashes</val><val>git stash pop</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">h?w8D]L^FH</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val><val>stash</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>&lt;b&gt;Reapply the stashed changes&lt;/b&gt;&amp;nbsp;without deleting&lt;b&gt;&amp;nbsp;stash&amp;nbsp;&lt;/b&gt;from the list of stashes</val><val>git stash apply</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">s]W5g${#u#</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val><val>stash</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show git stash stack (list of stashes)</val><val>git stash list</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Pd,w:x7/_-</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val><val>stash</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show branches already merged into current branch</val><val>git branch --merged</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">r6fVPW{|To</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show branches not yet merged into current branch</val><val>git branch --no-merged</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">c@|3gg#;C]</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Rebase master onto develop without checking it out</val><val>git rebase master develop</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">zi:*@|txPH</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show remote servers with URL displayed</val><val>git remote -v</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">B*+[Z2P7KB</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Rename remote 'server1' to 'server2'</val><val>git remote rename server1 server2</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">ti2E88+S5G</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Remove remote 'server1'</val><val>git remote rm server1</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">NeFQQhW5^#</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show last two commits with diffs</val><val>git log -p -2</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">jEwY}^Te}u</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show commit logs with stats</val><val>git log --stat</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">8.]Jh.QO$</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>&lt;div&gt;Show commit logs one per line&lt;/div&gt;</val><val>git log --pretty=oneline</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Nt[d(Wa#l9</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show commit logs with ascii graph</val><val>git log --graph</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">N3Nv.H3g;i</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show commit log for the last week</val><val>git log --since=1.week</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">K9W#BB4D6c</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>&lt;div&gt;Show prev commits for each lines 10-15 of file.rb&lt;/div&gt;</val><val>git blame -L 10,15 file.rb</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">DpA{?G=4xx</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Reapply stash 2</val><val>git stash apply stash@{2}</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">ASur]9.2r1</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Reapply stashed changes along with the changes in index (staging the changes, for example)</val><val>git stash apply --index</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">z0v]ev^m&amp;4</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Drop stash 2</val><val>git stash drop stash@{2}</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">K?U.M_8qGm</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Create branch 'mybranch' from stash</val><val>git stash branch mybranch</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">frj9MIHYN;</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Delete all stashes</val><val>git stash clear</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">vMkxJ_N}WR</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show what's staged but not yet committed</val><val>git diff --staged</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">C=%4u;E{qS</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Start binary search of commits to find bad commit</val><val>git bisect start</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">I;|,m~EPM+</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Mark current commit as broken during bisect</val><val>git bisect bad</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">snS(|j2h+c</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>&lt;div&gt;Mark current commit as good during bisect&lt;/div&gt;</val><val>git bisect good</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">nV[EjN,:@f</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Mark v2.2 as last known good commit during bisect (beginning of binary search)</val><val>git bisect good v2.2</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">B&amp;(BK&amp;(f`i</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>How do you initiate bisect algorithm in git (several commands)</val><val>&lt;div&gt;&lt;div&gt;Suppose you are trying to find the commit that broke a feature that was known to work in version v2.6.13-rc2 of your project. You start a bisect session as follows:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;$ git bisect start&lt;/div&gt;&lt;div&gt;$ git bisect bad # Current version is bad&lt;/div&gt;&lt;div&gt;$ git bisect good v2.6.13-rc2 # v2.6.13-rc2 is known to be good&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">z+Mb^@:H2B</val><val id="note_model_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Reset to original&amp;nbsp;HEAD when finished with bisect</val><val>git bisect reset</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">zT&gt;)P:&lt;]^A</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Run 'test.sh' on each commit during bisect (automates designation of commit as "good" or "bad")</val><val>git bisect run test.sh</val><val>Note that the script should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.</val><val>&lt;div&gt;&lt;a href="https://git-scm.com/docs/git-bisect"&gt;https://git-scm.com/docs/git-bisect&lt;/a&gt;&lt;/div&gt;</val></arr><val id="flags">0</val><val id="guid">P375+&amp;ZLLM</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Search the working directory for "foo()"</val><val>git grep "foo()"</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">w/@P4=C{XI</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>View all the merge conflicts (if your working tree is in corresponding state)</val><val>git diff</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">goZxIb4w*t</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>See differences between two commits ("commitid1", "commitid2")</val><val>git diff commitid1 commitid2</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">wb7|*(on45</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>See the files (only filenames) changed between two commits ("commitid1", "commitid2")</val><val>git diff&amp;nbsp;--name-only&amp;nbsp;commitid1 commitid2&amp;nbsp;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">D-cA&lt;mm5S&gt;</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Undo non-pushed commits (if you are tracking branch origin/master)</val><val>git reset origin/master</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">j+p@19O^.m</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Apply a patch ("patchname.patch")</val><val>&lt;div&gt;git apply -v patchname.patch&lt;/div&gt;</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">nsS,t6r6k~</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Re-checkout file ("filename") or files specified by path to version specified by &lt;i&gt;rev&lt;/i&gt; (which may be specified using a SHA1 commit ID, branch name, or tag), overwriting any local changes.</val><val>git checkout rev filename</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">rZOpQ[aZ&lt;4</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Check out the client branch, figure out the patches from the common ancestor of the client and server branches (the common ancestor branched from master in the past), and then replay the patches from client that are not into common ancestor onto master.</val><val>git rebase --onto master server client</val><val></val><val>Here are some diargrams:&amp;nbsp;&lt;a href="https://git-scm.com/book/ch3-6.html"&gt;https://git-scm.com/book/ch3-6.html&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">dOe.P/`?3w</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Create alias "co" for git checkout</val><val>git config --global alias.co checkout</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Q00f&gt;K3|x]</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>commands</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Add "unstage" alias to git (for current user)</val><val>git config --global alias.unstage 'reset HEAD --'</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">H+[B`$4X}+</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>commands</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Filter commit by author ('jdoe') in git log</val><val>git log --author jdoe</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">OK9(#LMJ]r</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>log</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Filter commit by presense of "pattern" in commit message in git log</val><val>git log --grep pattern</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">Oe9~pAq==p</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>log</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>What parameter of git log should you use to specify that you want to see only commits matching all given patterns (with --grep option)?</val><val>--all-match</val><val></val><val></val></arr><val id="flags">0</val><val id="guid">L%bpn*{MB[</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>log</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Look for differences whose patch text contains added/removed lines that match &amp;lt;regex&amp;gt;.</val><val>git log -G&amp;lt;regex&amp;gt;</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-log"&gt;https://git-scm.com/docs/git-log&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">D]39x!74&gt;j</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>log</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Stash all changes (including untracked and ignored files)</val><val>git stash --all</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-stash"&gt;https://git-scm.com/docs/git-stash&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">bf+S])w`{#</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Stash files in repo including untracked files (but not ignored ones)</val><val>git stash&amp;nbsp;--include-untracked</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-stash"&gt;https://git-scm.com/docs/git-stash&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">H[wLNmJhnn</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Start git stash interactive mode (allows you to &amp;nbsp;interactively select changes, that would be stashed)</val><val>git stash -p</val><val></val><val>&lt;a href="https://git-scm.com/docs/git-stash"&gt;https://git-scm.com/docs/git-stash&lt;/a&gt;</val></arr><val id="flags">0</val><val id="guid">tnbnb&amp;KWxw</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj><obj><val id="__type__">Note</val><val id="data"></val><arr id="fields"><val>Show status of the repository, ignoring untracked files</val><val>git status -uno</val><val>or&amp;nbsp;--untracked-files=no. Other options - normal (Shows untracked files and directories),&amp;nbsp;all (default, Also shows individual files in untracked directories).</val><val></val></arr><val id="flags">0</val><val id="guid">sG?&gt;pdX-Dy</val><val id="note_model_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="tags"><val>command</val><val>git</val><val>shell</val></arr></obj></arr></obj></arr><val id="crowdanki_uuid">a69dcedc-6d5b-11e6-adf3-8c705a50cbf0</val><val id="deck_config_uuid">a69dd698-6d5b-11e6-adf3-8c705a50cbf0</val><arr id="deck_configurations"><obj><val id="__type__">DeckConfig</val><val id="autoplay" class="bool">true</val><val id="crowdanki_uuid">a69dd698-6d5b-11e6-adf3-8c705a50cbf0</val><val id="dyn" class="bool">false</val><obj id="lapse"><arr id="delays"><val>10</val></arr><val id="leechAction">0</val><val id="leechFails">8</val><val id="minInt">1</val><val id="mult">0.0</val></obj><val id="maxTaken">60</val><val id="name">Default</val><obj id="new"><val id="bury" class="bool">true</val><arr id="delays"><val>1</val><val>10</val></arr><val id="initialFactor">2500</val><arr id="ints"><val>1</val><val>4</val><val>7</val></arr><val id="order">1</val><val id="perDay">20</val><val id="separate" class="bool">true</val></obj><val id="replayq" class="bool">true</val><obj id="rev"><val id="bury" class="bool">true</val><val id="ease4">1.3</val><val id="fuzz">0.05</val><val id="ivlFct">1.0</val><val id="maxIvl">36500</val><val id="minSpace">1</val><val id="perDay">100</val></obj><val id="timer">0</val></obj><obj><val id="__type__">DeckConfig</val><val id="autoplay" class="bool">true</val><val id="crowdanki_uuid">a69e3016-6d5b-11e6-adf3-8c705a50cbf0</val><val id="dyn" class="bool">false</val><obj id="lapse"><arr id="delays"><val>10</val></arr><val id="leechAction">0</val><val id="leechFails">8</val><val id="minInt">1</val><val id="mult">0</val></obj><val id="maxTaken">60</val><val id="name">Git</val><obj id="new"><val id="bury" class="bool">true</val><arr id="delays"><val>1</val><val>10</val></arr><val id="initialFactor">2500</val><arr id="ints"><val>1</val><val>4</val><val>7</val></arr><val id="order">1</val><val id="perDay">20</val><val id="separate" class="bool">true</val></obj><val id="replayq" class="bool">true</val><obj id="rev"><val id="bury" class="bool">true</val><val id="ease4">1.3</val><val id="fuzz">0.05</val><val id="ivlFct">1</val><val id="maxIvl">36500</val><val id="minSpace">1</val><val id="perDay">100</val></obj><val id="timer">0</val></obj></arr><val id="desc"></val><val id="dyn">0</val><val id="extendNew">10</val><val id="extendRev">50</val><arr id="media_files"></arr><val id="name">Software Engineering::git</val><arr id="note_models"><obj><val id="__type__">NoteModel</val><val id="crowdanki_uuid">a6a07e16-6d5b-11e6-adf3-8c705a50cbf0</val><val id="css">.card {
 font-familiy: arial;
 font-size: 20px;
 text-align: center;
 color: black;
 background-color: white;
}</val><arr id="flds"><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Front</val><val id="ord">0</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Back</val><val id="ord">1</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj></arr><val id="latexPost">\end{document}</val><val id="latexPre">\documentclass[12pt]{article}
\special{papersize=3in,5in}
\usepackage[utf8]{inputenc}
\usepackage{amssymb,amsmath}
\pagestyle{empty}
\setlength{\parindent}{0in}
\begin{document}
</val><val id="name">Basic-61fb1</val><arr id="req"><arr><val>0</val><val>all</val><arr><val>0</val></arr></arr></arr><val id="sortf">0</val><arr id="tags"></arr><arr id="tmpls"><obj><val id="afmt">{{FrontSide}}

&lt;hr id=answer&gt;

{{Back}}</val><val id="bafmt"></val><val id="bfont">Arial</val><val id="bqfmt"></val><val id="bsize">12</val><val id="did" class="null" /><val id="name">Card 1</val><val id="ord">0</val><val id="qfmt">{{Front}}</val></obj></arr><val id="type">0</val><arr id="vers"></arr></obj><obj><val id="__type__">NoteModel</val><val id="crowdanki_uuid">a6a2f2e0-6d5b-11e6-adf3-8c705a50cbf0</val><val id="css">.card {
 font-family: arial;
 font-size: 20px;
 text-align: center;
 color: black;
 background-color: white;
}
</val><arr id="flds"><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Purpose</val><val id="ord">0</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Command</val><val id="ord">1</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Extra</val><val id="ord">2</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Source</val><val id="ord">3</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">true</val></obj></arr><val id="latexPost">\end{document}</val><val id="latexPre">\documentclass[12pt]{article}
\special{papersize=3in,5in}
\usepackage[utf8]{inputenc}
\usepackage{amssymb,amsmath}
\pagestyle{empty}
\setlength{\parindent}{0in}
\begin{document}
</val><val id="name">Command line</val><arr id="req"><arr><val>0</val><val>all</val><arr><val>0</val></arr></arr></arr><val id="sortf">0</val><arr id="tags"><val>Linux</val><val>bash</val><val>command</val><val>tar</val></arr><arr id="tmpls"><obj><val id="afmt">{{FrontSide}}

&lt;hr id=answer&gt;
&lt;br&gt;
{{Extra}}
&lt;br&gt;
&lt;a href="{{text:Source}}"&gt;{{Source}}&lt;/a&gt;</val><val id="bafmt"></val><val id="bqfmt"></val><val id="did" class="null" /><val id="name">TypeCard</val><val id="ord">0</val><val id="qfmt">{{Purpose}}
&lt;br&gt;
{{type:Command}}</val></obj></arr><val id="type">0</val><arr id="vers"></arr></obj><obj><val id="__type__">NoteModel</val><val id="crowdanki_uuid">a69ea2c6-6d5b-11e6-adf3-8c705a50cbf0</val><val id="css">.card {
 font-familiy: arial;
 font-size: 20px;
 text-align: center;
 color: black;
 background-color: white;
}</val><arr id="flds"><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Front</val><val id="ord">0</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj><obj><val id="font">Arial</val><arr id="media"></arr><val id="name">Back</val><val id="ord">1</val><val id="rtl" class="bool">false</val><val id="size">20</val><val id="sticky" class="bool">false</val></obj></arr><val id="latexPost">\end{document}</val><val id="latexPre">\documentclass[12pt]{article}
\special{papersize=3in,5in}
\usepackage[utf8]{inputenc}
\usepackage{amssymb,amsmath}
\pagestyle{empty}
\setlength{\parindent}{0in}
\begin{document}
</val><val id="name">Basic</val><arr id="req"><arr><val>0</val><val>all</val><arr><val>0</val></arr></arr></arr><val id="sortf">0</val><arr id="tags"><val>bash</val></arr><arr id="tmpls"><obj><val id="afmt">{{FrontSide}}

&lt;hr id=answer&gt;

{{Back}}</val><val id="bafmt"></val><val id="bfont">Arial</val><val id="bqfmt"></val><val id="bsize">12</val><val id="did" class="null" /><val id="name">Card 1</val><val id="ord">0</val><val id="qfmt">{{Front}}</val></obj></arr><val id="type">0</val><arr id="vers"></arr></obj></arr><arr id="notes"></arr></obj>